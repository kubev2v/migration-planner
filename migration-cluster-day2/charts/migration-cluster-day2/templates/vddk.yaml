apiVersion: v1
kind: ServiceAccount
metadata:
  creationTimestamp: null
  name: mtv-initiator
  namespace: {{ .Values.mtvOperator.subscription.namespace }}
  annotations:
    securitycontextconstraints.security.openshift.io: anyuid
    argocd.argoproj.io/sync-wave: "1"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: mtv-initiator 
  namespace: {{ .Values.mtvOperator.subscription.namespace }}
  annotations:
    argocd.argoproj.io/sync-wave: "1"
rules:
  - apiGroups: ["build.openshift.io"]
    resources: ["builds", "buildconfigs", "buildconfigs/instantiate"]
    verbs: ["create", "get", "list", "watch", "update"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["create", "get", "list", "watch"]
  - apiGroups: [""]
    resources: ["secrets", "configmaps"]
    verbs: ["get", "update", "patch", "list"]
  - apiGroups: ["security.openshift.io"]
    resources: ["securitycontextconstraints"]
    resourceNames:
      - anyuid 
    verbs: ["use"]
  - apiGroups: ["forklift.konveyor.io"]
    resources: ["providers"]
    verbs: ["create", "get", "update", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: mtv-initiator-binding
  namespace: {{ .Values.mtvOperator.subscription.namespace }}
  annotations:
    argocd.argoproj.io/sync-wave: "1"
subjects:
  - kind: ServiceAccount
    name: mtv-initiator
    namespace: {{ .Values.mtvOperator.subscription.namespace }}
roleRef:
  kind: Role
  name: mtv-initiator
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: build.openshift.io/v1
kind: BuildConfig
metadata:
  name: vddk
  namespace: {{ .Values.mtvOperator.subscription.namespace }}
  annotations:
    argocd.argoproj.io/sync-wave: "1"
spec:
  strategy:
    dockerStrategy: {}
  output:
    to:
      kind: ImageStreamTag
      name: "vddk:latest"
  source:
    dockerfile: |
      FROM registry.access.redhat.com/ubi9/ubi-minimal
      ADD http://mtv-init.{{ .Values.mtvOperator.subscription.namespace }}/vmware/vddk.tar.gz /vddk.tar.gz
      RUN microdnf install -y tar gzip file
      RUN tar -zxvf /vddk.tar.gz
      ENTRYPOINT ["cp", "-r", "/vmware-vix-disklib-distrib", "/opt"]
---
apiVersion: image.openshift.io/v1
kind: ImageStream
metadata:
  name: vddk
  namespace: {{ .Values.mtvOperator.subscription.namespace }}
  annotations:
    argocd.argoproj.io/sync-wave: "1"
spec:
  lookupPolicy:
    local: true
  tags:
  - importPolicy:
      importMode: Legacy
    name: latest
    referencePolicy:
      type: Source
---
apiVersion: batch/v1
kind: Job
metadata:
  name: mtv-deps
  namespace: {{ .Values.mtvOperator.subscription.namespace }}
  annotations:
    argocd.argoproj.io/sync-wave: "50"
spec:
  parallelism: 1    
  completions: 1    
  activeDeadlineSeconds: 604800
  backoffLimit: 6   
  template:         
    metadata:
      name: vddk-tasks
      annotations:
        openshift.io/required-scc: "anyuid" 
    spec:
      serviceAccountName: mtv-initiator
      #      securityContext:
      #  runAsUser: 0
      containers:
      - name: vddk-tasks
        image: registry.access.redhat.com/ubi9/ubi-minimal
        #  securityContext:
        #  runAsUser: 0
        command: ["/bin/bash", "-c"]
        args:
          - |

            set -o errexit
            set -x
            
            echo âŒ› Waiting for the user to complete the survey at https://mtv-init-{{ .Values.mtvOperator.subscription.namespace }}.apps.clusterName.clusterDomeain
            until $(curl --fail --silent mtv-init.{{ .Values.mtvOperator.subscription.namespace }}/vmware/done); do
              sleep 5
            done

            curl -O downloads.openshift-console.svc.cluster.local/amd64/linux/oc.tar 
            microdnf install -y tar
            tar -xvf oc.tar && chmod +x oc
           
            # start the build of vddk
            ./oc start-build vddk

            # update the vmware-credentials secret
            source <(curl -o - mtv-init.{{ .Values.mtvOperator.subscription.namespace }}/vmware/env)
            ./oc set data secret/vmware-credentials user="$username" password="$password" insecureSkipVerify="true"
            # update url in vsphere provider

            ./oc create -f - << EOF
            apiVersion: forklift.konveyor.io/v1beta1
            kind: Provider
            metadata:
              labels:
                app: mtv
              name: vmware-provider
              namespace: openshift-mtv
            spec:
              type: vsphere
              url: "$url"
              secret:
                name: vmware-credentials
                namespace: openshift-mtv
              settings:
                vddkInitImage: image-registry.openshift-image-registry.svc:5000/openshift-mtv/vddk:latest
            EOF
            
      restartPolicy: OnFailure    
#...
