// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package client

import (
	"context"
	"github.com/google/uuid"
	api "github.com/kubev2v/migration-planner/api/v1alpha1/agent"
	"sync"
)

// Ensure, that PlannerMock does implement Planner.
// If this is not the case, regenerate this file with moq.
var _ Planner = &PlannerMock{}

// PlannerMock is a mock implementation of Planner.
//
//	func TestSomethingThatUsesPlanner(t *testing.T) {
//
//		// make and configure a mocked Planner
//		mockedPlanner := &PlannerMock{
//			HealthFunc: func(ctx context.Context) error {
//				panic("mock out the Health method")
//			},
//			UpdateAgentStatusFunc: func(ctx context.Context, id uuid.UUID, params api.AgentStatusUpdate) error {
//				panic("mock out the UpdateAgentStatus method")
//			},
//			UpdateSourceStatusFunc: func(ctx context.Context, id uuid.UUID, params api.SourceStatusUpdate) error {
//				panic("mock out the UpdateSourceStatus method")
//			},
//		}
//
//		// use mockedPlanner in code that requires Planner
//		// and then make assertions.
//
//	}
type PlannerMock struct {
	// HealthFunc mocks the Health method.
	HealthFunc func(ctx context.Context) error

	// UpdateAgentStatusFunc mocks the UpdateAgentStatus method.
	UpdateAgentStatusFunc func(ctx context.Context, id uuid.UUID, params api.AgentStatusUpdate) error

	// UpdateSourceStatusFunc mocks the UpdateSourceStatus method.
	UpdateSourceStatusFunc func(ctx context.Context, id uuid.UUID, params api.SourceStatusUpdate) error

	// calls tracks calls to the methods.
	calls struct {
		// Health holds details about calls to the Health method.
		Health []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// UpdateAgentStatus holds details about calls to the UpdateAgentStatus method.
		UpdateAgentStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
			// Params is the params argument value.
			Params api.AgentStatusUpdate
		}
		// UpdateSourceStatus holds details about calls to the UpdateSourceStatus method.
		UpdateSourceStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
			// Params is the params argument value.
			Params api.SourceStatusUpdate
		}
	}
	lockHealth             sync.RWMutex
	lockUpdateAgentStatus  sync.RWMutex
	lockUpdateSourceStatus sync.RWMutex
}

// Health calls HealthFunc.
func (mock *PlannerMock) Health(ctx context.Context) error {
	if mock.HealthFunc == nil {
		panic("PlannerMock.HealthFunc: method is nil but Planner.Health was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockHealth.Lock()
	mock.calls.Health = append(mock.calls.Health, callInfo)
	mock.lockHealth.Unlock()
	return mock.HealthFunc(ctx)
}

// HealthCalls gets all the calls that were made to Health.
// Check the length with:
//
//	len(mockedPlanner.HealthCalls())
func (mock *PlannerMock) HealthCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockHealth.RLock()
	calls = mock.calls.Health
	mock.lockHealth.RUnlock()
	return calls
}

// UpdateAgentStatus calls UpdateAgentStatusFunc.
func (mock *PlannerMock) UpdateAgentStatus(ctx context.Context, id uuid.UUID, params api.AgentStatusUpdate) error {
	if mock.UpdateAgentStatusFunc == nil {
		panic("PlannerMock.UpdateAgentStatusFunc: method is nil but Planner.UpdateAgentStatus was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		ID     uuid.UUID
		Params api.AgentStatusUpdate
	}{
		Ctx:    ctx,
		ID:     id,
		Params: params,
	}
	mock.lockUpdateAgentStatus.Lock()
	mock.calls.UpdateAgentStatus = append(mock.calls.UpdateAgentStatus, callInfo)
	mock.lockUpdateAgentStatus.Unlock()
	return mock.UpdateAgentStatusFunc(ctx, id, params)
}

// UpdateAgentStatusCalls gets all the calls that were made to UpdateAgentStatus.
// Check the length with:
//
//	len(mockedPlanner.UpdateAgentStatusCalls())
func (mock *PlannerMock) UpdateAgentStatusCalls() []struct {
	Ctx    context.Context
	ID     uuid.UUID
	Params api.AgentStatusUpdate
} {
	var calls []struct {
		Ctx    context.Context
		ID     uuid.UUID
		Params api.AgentStatusUpdate
	}
	mock.lockUpdateAgentStatus.RLock()
	calls = mock.calls.UpdateAgentStatus
	mock.lockUpdateAgentStatus.RUnlock()
	return calls
}

// UpdateSourceStatus calls UpdateSourceStatusFunc.
func (mock *PlannerMock) UpdateSourceStatus(ctx context.Context, id uuid.UUID, params api.SourceStatusUpdate) error {
	if mock.UpdateSourceStatusFunc == nil {
		panic("PlannerMock.UpdateSourceStatusFunc: method is nil but Planner.UpdateSourceStatus was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		ID     uuid.UUID
		Params api.SourceStatusUpdate
	}{
		Ctx:    ctx,
		ID:     id,
		Params: params,
	}
	mock.lockUpdateSourceStatus.Lock()
	mock.calls.UpdateSourceStatus = append(mock.calls.UpdateSourceStatus, callInfo)
	mock.lockUpdateSourceStatus.Unlock()
	return mock.UpdateSourceStatusFunc(ctx, id, params)
}

// UpdateSourceStatusCalls gets all the calls that were made to UpdateSourceStatus.
// Check the length with:
//
//	len(mockedPlanner.UpdateSourceStatusCalls())
func (mock *PlannerMock) UpdateSourceStatusCalls() []struct {
	Ctx    context.Context
	ID     uuid.UUID
	Params api.SourceStatusUpdate
} {
	var calls []struct {
		Ctx    context.Context
		ID     uuid.UUID
		Params api.SourceStatusUpdate
	}
	mock.lockUpdateSourceStatus.RLock()
	calls = mock.calls.UpdateSourceStatus
	mock.lockUpdateSourceStatus.RUnlock()
	return calls
}
