// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"time"

	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for AgentStatus.
const (
	AgentStatusError                     AgentStatus = "error"
	AgentStatusGatheringInitialInventory AgentStatus = "gathering-initial-inventory"
	AgentStatusNotConnected              AgentStatus = "not-connected"
	AgentStatusSourceGone                AgentStatus = "source-gone"
	AgentStatusUpToDate                  AgentStatus = "up-to-date"
	AgentStatusWaitingForCredentials     AgentStatus = "waiting-for-credentials"
)

// Defines values for NetworkType.
const (
	Distributed NetworkType = "distributed"
	Dvswitch    NetworkType = "dvswitch"
	Standard    NetworkType = "standard"
	Unsupported NetworkType = "unsupported"
)

// Defines values for GenerateSourceReportParamsFormat.
const (
	Csv  GenerateSourceReportParamsFormat = "csv"
	Html GenerateSourceReportParamsFormat = "html"
)

// Defines values for GenerateSourceReportParamsReportType.
const (
	Detailed            GenerateSourceReportParamsReportType = "detailed"
	MigrationAssessment GenerateSourceReportParamsReportType = "migration_assessment"
	Summary             GenerateSourceReportParamsReportType = "summary"
)

// Agent defines model for Agent.
type Agent struct {
	CreatedAt     time.Time          `json:"createdAt"`
	CredentialUrl string             `json:"credentialUrl"`
	Id            openapi_types.UUID `json:"id"`
	Status        AgentStatus        `json:"status"`
	StatusInfo    string             `json:"statusInfo"`
	UpdatedAt     time.Time          `json:"updatedAt"`
	Version       string             `json:"version"`
}

// AgentStatus defines model for Agent.Status.
type AgentStatus string

// AgentProxy defines model for AgentProxy.
type AgentProxy struct {
	HttpUrl  *string `json:"httpUrl" validate:"omitnil,url,startsnotwith=https"`
	HttpsUrl *string `json:"httpsUrl" validate:"omitnil,url,startswith=https"`
	NoProxy  *string `json:"noProxy" validate:"omitnil,max=1000"`
}

// Datastore defines model for Datastore.
type Datastore struct {
	DiskId                  string `json:"diskId"`
	FreeCapacityGB          int    `json:"freeCapacityGB"`
	HardwareAcceleratedMove bool   `json:"hardwareAcceleratedMove"`
	Model                   string `json:"model"`
	ProtocolType            string `json:"protocolType"`
	TotalCapacityGB         int    `json:"totalCapacityGB"`
	Type                    string `json:"type"`
	Vendor                  string `json:"vendor"`
}

// Error defines model for Error.
type Error struct {
	// Message Error message
	Message string `json:"message"`
}

// Histogram defines model for Histogram.
type Histogram struct {
	Data     []int `json:"data"`
	MinValue int   `json:"minValue"`
	Step     int   `json:"step"`
}

// Host defines model for Host.
type Host struct {
	Model  string `json:"model"`
	Vendor string `json:"vendor"`
}

// Infra defines model for Infra.
type Infra struct {
	ClustersPerDatacenter *[]int         `json:"clustersPerDatacenter,omitempty"`
	Datastores            []Datastore    `json:"datastores"`
	HostPowerStates       map[string]int `json:"hostPowerStates"`
	Hosts                 *[]Host        `json:"hosts,omitempty"`
	HostsPerCluster       []int          `json:"hostsPerCluster"`
	Networks              []Network      `json:"networks"`
	TotalClusters         int            `json:"totalClusters"`
	TotalDatacenters      *int           `json:"totalDatacenters,omitempty"`
	TotalHosts            int            `json:"totalHosts"`
}

// Inventory defines model for Inventory.
type Inventory struct {
	Infra   Infra   `json:"infra"`
	Vcenter VCenter `json:"vcenter"`
	Vms     VMs     `json:"vms"`
}

// Label defines model for Label.
type Label struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// MigrationIssue defines model for MigrationIssue.
type MigrationIssue struct {
	Assessment string  `json:"assessment"`
	Count      int     `json:"count"`
	Id         *string `json:"id,omitempty"`
	Label      string  `json:"label"`
}

// MigrationIssues defines model for MigrationIssues.
type MigrationIssues = []MigrationIssue

// Network defines model for Network.
type Network struct {
	Dvswitch *string     `json:"dvswitch,omitempty"`
	Name     string      `json:"name"`
	Type     NetworkType `json:"type"`
	VlanId   *string     `json:"vlanId,omitempty"`
}

// NetworkType defines model for Network.Type.
type NetworkType string

// Source defines model for Source.
type Source struct {
	Agent      *Agent             `json:"agent,omitempty"`
	CreatedAt  time.Time          `json:"createdAt"`
	Id         openapi_types.UUID `json:"id"`
	Inventory  *Inventory         `json:"inventory,omitempty"`
	Labels     *[]Label           `json:"labels,omitempty"`
	Name       string             `json:"name"`
	OnPremises bool               `json:"onPremises"`
	UpdatedAt  time.Time          `json:"updatedAt"`
}

// SourceCreate defines model for SourceCreate.
type SourceCreate struct {
	CertificateChain *string     `json:"certificateChain" validate:"omitnil,certs"`
	Name             string      `json:"name" validate:"required,source_name,min=1,max=100"`
	Proxy            *AgentProxy `json:"proxy,omitempty"`
	SshPublicKey     *string     `json:"sshPublicKey" validate:"omitnil,ssh_key"`
}

// SourceList defines model for SourceList.
type SourceList = []Source

// SourceUpdateOnPrem defines model for SourceUpdateOnPrem.
type SourceUpdateOnPrem struct {
	AgentId   openapi_types.UUID `json:"agentId"`
	Inventory Inventory          `json:"inventory"`
}

// Status Status is a return value for calls that don't return other objects.
type Status struct {
	// Message A human-readable description of the status of this operation.
	Message *string `json:"message,omitempty"`

	// Reason A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.
	Reason *string `json:"reason,omitempty"`

	// Status Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status *string `json:"status,omitempty"`
}

// VCenter defines model for VCenter.
type VCenter struct {
	Id string `json:"id"`
}

// VMResourceBreakdown defines model for VMResourceBreakdown.
type VMResourceBreakdown struct {
	Histogram                      Histogram `json:"histogram"`
	Total                          int       `json:"total"`
	TotalForMigratable             int       `json:"totalForMigratable"`
	TotalForMigratableWithWarnings int       `json:"totalForMigratableWithWarnings"`
	TotalForNotMigratable          int       `json:"totalForNotMigratable"`
}

// VMs defines model for VMs.
type VMs struct {
	CpuCores             VMResourceBreakdown `json:"cpuCores"`
	DiskCount            VMResourceBreakdown `json:"diskCount"`
	DiskGB               VMResourceBreakdown `json:"diskGB"`
	MigrationWarnings    []MigrationIssue    `json:"migrationWarnings"`
	NotMigratableReasons []MigrationIssue    `json:"notMigratableReasons"`
	// Deprecated:
	Os                          map[string]int      `json:"os"`
	OsInfo                      *map[string]OsInfo  `json:"osInfo,omitempty"`
	PowerStates                 map[string]int      `json:"powerStates"`
	RamGB                       VMResourceBreakdown `json:"ramGB"`
	Total                       int                 `json:"total"`
	TotalMigratable             int                 `json:"totalMigratable"`
	TotalMigratableWithWarnings *int                `json:"totalMigratableWithWarnings,omitempty"`
}

// OsInfo defines model for osInfo.
type OsInfo struct {
	Count     int  `json:"count"`
	Supported bool `json:"supported"`
}

// PresignedUrl defines model for presigned-url.
type PresignedUrl struct {
	// ExpiresAt Expiration time for the URL token.
	ExpiresAt *time.Time `json:"expires_at,omitempty"`

	// Url Pre-signed URL for downloading the source discovery image.
	Url string `json:"url"`
}

// ListSourcesParams defines parameters for ListSources.
type ListSourcesParams struct {
	// IncludeDefault control whatever the default report should be added to the result
	IncludeDefault *bool `form:"include_default,omitempty" json:"include_default,omitempty"`
}

// GenerateSourceReportParams defines parameters for GenerateSourceReport.
type GenerateSourceReportParams struct {
	// Format Format of the report
	Format GenerateSourceReportParamsFormat `form:"format" json:"format"`

	// ReportType Type of report to generate
	ReportType *GenerateSourceReportParamsReportType `form:"report_type,omitempty" json:"report_type,omitempty"`

	// IncludeWarnings Include migration warnings in the report
	IncludeWarnings *bool `form:"include_warnings,omitempty" json:"include_warnings,omitempty"`
}

// GenerateSourceReportParamsFormat defines parameters for GenerateSourceReport.
type GenerateSourceReportParamsFormat string

// GenerateSourceReportParamsReportType defines parameters for GenerateSourceReport.
type GenerateSourceReportParamsReportType string

// UploadRvtoolsFileMultipartBody defines parameters for UploadRvtoolsFile.
type UploadRvtoolsFileMultipartBody struct {
	// File The RVTools file (Excel)
	File openapi_types.File `json:"file"`
}

// CreateSourceJSONRequestBody defines body for CreateSource for application/json ContentType.
type CreateSourceJSONRequestBody = SourceCreate

// UpdateSourceJSONRequestBody defines body for UpdateSource for application/json ContentType.
type UpdateSourceJSONRequestBody = SourceUpdateOnPrem

// UploadRvtoolsFileMultipartRequestBody defines body for UploadRvtoolsFile for multipart/form-data ContentType.
type UploadRvtoolsFileMultipartRequestBody UploadRvtoolsFileMultipartBody
