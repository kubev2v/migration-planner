// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/kubev2v/migration-planner/api/v1alpha1"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RYTXPbNhD9Kxy0R0qU3fSim+3mQ5Mm9diT5JDRYU2uRMQkgAJLa9yM/nsHAClSIkQx",
	"bpxppzeJWOwuHt7uW/IrS2WppEBBhs2/MpPmWIL7ebFGQbcEVJkPKgNC+1BpqVATR2eSasxQEIfigy7s",
	"A3pUyObMkOZizbYx41nwsXFuB5YWYiWDyw+oDZcisLaNmcY/K64xY/PPTYg9h/FBxi6/1ucybnzKuy+Y",
	"ko33Umup+ycv0RhYO0gyNKnmilxW3j5qluMTSTZ2y23MFmKloR8pAwJDUvt/nLA0faOVRrwCBSmnx9eX",
	"HXC4IFyjtichSVCcNHJPTmHrVvse48M8QoDWD0BreLT/c2noWm5QW6r500CWcQsnFNd7pzyWbse79Wau",
	"UV8VlSHUe5Ad3b7LRSBtpL4fQlpAiUFiNsihqMqafyIDbfmVcWt2VxG6fw9mwynNWcwqYSqlpLYLyzhA",
	"9gLEIht9Hy63MZj7i/MQmQG2vLFohtYP47fGh877V9K/8g7wcZfvoaMsxAMKkvqxfzW8KaCfNa7YnP2U",
	"tL0tqRtb4qvMYpuiqBkyZP/xypvZHZ4Pg9bvTA+cJpB3ENdphs72jq81WOIvjKkG6x2MQWNKFBTkYiqr",
	"vZXOvRZwh8VpRnmzuBuocTuGYLey0mlAMGDdCM3uYENwejdOiBaEZShSqhEIswt33JXUJRCbWxLhhHgZ",
	"6MCNJu1sq8qJQN+sy7RhSjWG2/h4fzAmf4uPJ9SwaR5C0iSVQmDqe8YGOHGxnqyknrQSZtmETp9itgbK",
	"0TqccMHt4qTNP2aVmpCcOBEP9ZkTmls5+f8GjA/I5PB1wMTHZbmO0I0WYtohJUKlIVNuPXTOcidlgSBG",
	"337oAB3HxxMbnpcc/RfPR7/DtDsMaEKHUm96XL+jjtAefsTnuxs0DpJLjXCfyY3o+8+5IbnWUIbHnm9U",
	"75KLj1BUGLY2hGqElO2c1Du8IIWbnhW6AfV8JbXv6HBX4Fi7T5zyT6AFF2szvOe9pGH3BydrwW5SD+Z5",
	"MqljGYRZEBCvVFVXzTw7LKZ9Cm3dNHV/1QjcE/f78fcJm8tGort3NOTnUNOtRHRhu0EwUjzFjfyns7L6",
	"blO3hvLJiJ6qolElNL5+QpMr64eKW5Y2x9sxp0tBdw37UB654BB3+iWzdZ3f63DBUxQG27cOdqEgzTE6",
	"n86sTtpXbpYTKTNPks1mMwW3PJV6ndR7TfL74url+9uXk/PpbJpTWTjIOFk023kzui5ACNTRxfUimkRO",
	"KyIUmZLcnXH30s0qkeGKC8wcAxUKUJzN2S/T2fTM4gCUO9gTUDx5OEv8wJd85dk2acccVVH/zdnrfuSt",
	"IrmKKEefCnOhav5nbM68vnY+ULjQGkr0LzSfD30vftvzxu0zm2szl8y9xLfMIF1hXH8NGTMvLP1mNHQp",
	"MyfZqRRUz+egVMFTl37yxfiPF63roZrpf4PZbj2FjZL2fq2D89msj+Yfb+0Nnc/Oji298Lu+S5r+I4nL",
	"bD/UJWTRjcfFxzx7/pgfBFSUS83/8ix9cfYDDvpaCrTBfv0RqC7stCagiG5RP6COGsOYEdiu99lPe2xp",
	"HzWV6FvvuFLUqApID2vRKEz5imMWeV+9srzx27qT8IjCbLw3Pv8zxRmY+Lf7+mITPVKt3zGDEEX+bzU+",
	"e/H8Qd9LeiUrkf2L6rwuGl/oOUJBuY22xkBR++UozTG975XuG793rLJ0UqijLl3+xiXqC93PJwnbLrd/",
	"BwAA//8aO8BWZhgAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
