// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/kubev2v/migration-planner/api/v1alpha1"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RYTXPjNg/+Kxq+71FrOen24lvi7oenTZpJJruHjA+IBFvcSCRLQvGkGf/3DknJli1a",
	"1qbJTju92SIIPAAefEjPLJWlkgIFGTZ5ZibNsQT382yJgm4IqDK3KgNC+1BpqVATRyeSasxQEIfiVhf2",
	"AT0pZBNmSHOxZOuY8Sz42Di1PUczsZDB40fUhksROFvHTOMfFdeYscldY2JHYbyH2OHb6pzHjU55/w1T",
	"svY+aC111/MSjYGlC0mGJtVckUPl5aPmOD4CspGbr2M2EwsNXUsZEBiS2v/jhKXpCi004hQUpJyePp23",
	"gsMF4RK19YQkQXFUyD05Flt32tUY7+MIBbR+AFrDk/2fS0NXcoXaUs17A1nGbTihuNrx8hDclnarzVyh",
	"nhaVIdQ7ITt4fYNFIK2kfuiLdPZoVpzSPEhOASUGD5qwoqjKmpwiA23Jl3Erdl8Run+N+phVwlRKSW0P",
	"5nGgEgoQs2xwshy2IQnxWfXxMz1U+mxDHTrft78V3lfezVeXD62sxO1iCLkyE48oSOqnbt54U13/17hg",
	"E/a/ZNv4krrrJb4EbWxTFDV9+uS/TL2YveHJ0it9YTrBaQx5BXENM+TbBV9qsFUxM6bqbQZgDBpToqAg",
	"F1NZ7Zy08lrAPRbHGeXF4rahRu0Qgt3ISqeBaQLLZgptHOsLp1fjptSMsAxZSjUCYXbm3F1IXQKxiSUR",
	"viNeBtpzM7A2slXlJkRXrM20fko1gn39oXID9juA7mXEgdx621YYysh+6EIUkim3Glpw76UsEMTgKIUw",
	"thQfBta/dDiazN4uTfuwNyfxxnQIetMLup1nQI/mB3ReXKNxITnXCA+ZXImu/pwbkksNZXh3+M4RWHLx",
	"BYoKw9KGUA1o+Rsl9Q3fuMPNwQ6EninzUWrf+eC+wKFyXznlX0ELLpam/86lpH71e55tg91AD+I8CuoQ",
	"gjALAk0+VdW0WQr7h06XQmu3dTxMm0Hwwvt+h3zB5bIZZe0c9enZn322lbbDdo1gpHiJGvl3F071aqur",
	"hvLFET1WRYNKaHj9hDY81jUVb1nauLdhTpuCLg27oTyQ4BB3uiWzdp3fv0AWPEVhnNt++rIzBWmO0elo",
	"bOekfW9lOZEykyRZrVYjcMcjqZdJfdckv82mHy5vPrw7HY1HOZWFCxknG83tXhZdFSAE6ujsaha9i9ys",
	"iFBkSnLn4+bNlVUiwwUXmDkGKhSgOJuwn0bj0YmNA1Duwp6A4snjSeIXo+SZZ+tk++asKuq+fvq5H3mp",
	"SC4iytFDYc5Uzf+MTZifr623fGdaQ4l+8b/b1z37ZUcbt88s1ublYuJH/JYZpCuM608KQ/aFub+Mhs5l",
	"5kZ2KgXVeywoVfDUwU++Gf8FYKu6r2a6HzLWa09ho6TNr1VwOh53o/n7rzZDp+OTQ0fv/a1Xgem/NDhk",
	"u6bOIYuufVy8zZO3t3kroKJcav6nZ+n7kx/g6Ccp0Br7+UdEdWa3NQFFdIP6EXXUCMaMwHa9O7/tsbl9",
	"1FSib73DSlGjKiDdr0WjMOULjlnkdXXK8tpfa2/CAwqz0d7o/NcUZ2DjX+/OFwv0QLW+IoIQRf5rNT5+",
	"//ZGLyV9lJXI/kF1XheNL/QcoSD3dW+JgaL2x1GaY/rQKd3P/u7QydKCUFudO/zGAfWF7veThK3n678C",
	"AAD//z2Y2earFwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
