// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/kubev2v/migration-planner/api/v1alpha1"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
