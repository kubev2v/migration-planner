// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/kubev2v/migration-planner/api/v1alpha1"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RYTXPbNhD9Kxy0R0qU3fSim+3mQ5Mm9diT5JDRYU2uSMQkwAJLa9wM/3sHAClSIkQx",
	"bpxppzcbWOwuHt7uW/Eri2VRSoGCNFt+ZTrOsAD750WKgm4JqNIfygQIzWKpZImKOFqTWGGCgjjkH1Ru",
	"FuixRLZkmhQXKatDxhPvsrZuR7ZWYiO92w+oNJfCs1eHTOGfFVeYsOXnNsSew/AgY5tf53Mdtj7l3ReM",
	"ycR7qZRUw5sXqDWkFpIEdax4STYrZx+02+GJJFu7dR2yldgoGEZKgECTVO4/TljoodFGIV5BCTGnx9eX",
	"PXC4IExRmZuQJMhPGtmVU9ja3aHH8DAPH6DNAigFj+b/TGq6lltUhmruNpAk3MAJ+fXeLY+l2/NuvOlr",
	"VFd5pQnVHmRHj+9yEUhbqe7HkBZQoJeYLXIoqqLhn0hAGX4l3JjdVYRJD5JxbG2cKfi5R3DX1SMv/8Yg",
	"49s/jN8ZHzofwjt8vh6IYZ+7vqusxAMKkupxCDNvi+FnhRu2ZD9FXZ+KmiYVuYoxTSFG0bz2mP3HK2dm",
	"Tri3HbV+pwfgtIGcg7BJ03e3dzxVYEi80roarV3QGrUuUJCXV7Gs9nZ675rDHeanq9WZhf1ArdspBLuV",
	"lYo9zR/SVjR2FxuD07mxorIiLHyRYoVAmFzY626kKoDY0pAIZ8QLTzcNJyvQzltV2ZY/NOtzcZx0rWEd",
	"Hu8GWmdv8fGE9rWtQkiaxVIIjE2HCNkWOHGRzjZSzboLGr6hVaOQpUAZGoczLrjZnHX5h6wqZyRnVrLX",
	"4TcrbGXF/hte4YBuFl8LTHhchJsI/Wg+Lh6Sxlc8MubGQ+8ud1LmCGLy6/su0HN8PLHx6cgWyOr56HeY",
	"do8BbWhf6m0XHPbc5HQv4Ud8vrtBbSG5VAj3idyKof+Ma5KpgsI/5HyjVhdcfIS8Qr+1JiwniN3OSXPC",
	"SZa/LRopHNHXV1K5ng93OU61+8Qp+wRKcJHq8TPvJY27P7hZB3abujfPk0kdy8DPAo+8xWV11U6v43I7",
	"pFBtZ6f7q1YCn3jeDbtPOFy0It5/ozE/h6pvJKIP2w2CluIpbuQ/nYzL7zZjKyiejOipKppUQtPrxzfb",
	"smGosGNpe70dc/oUtM+wD+WRB/ZxZ1gyte38TodzHqPQ2P3GYBclxBkG5/OF0Ukz3rCMqNTLKNput3Ow",
	"23Op0qg5q6PfV1cv39++nJ3PF/OMitxCxsmg2U2kwXUOQqAKLq5XwSywWhGgSErJ7R13P7FZJRLccIGJ",
	"ZWCJAkrOluyX+WJ+ZnAAyizsEZQ8ejiL3EgYfeVJHXVjTlnR8Hey0/3AWQVyE1CGLhVmQzX8T9iSOX3t",
	"fY6woRUU6H7yfD70vfptzxs3aybXdi5ZOonvmEGqwrD59jFlXli7w6jpUiZWsmMpqJngoSxzHtv0oy/a",
	"faroXI/VzPCLS107CutSmvc1Ds4XiyGaf7w1L3S+ODu29cKd+i5puk8iNrP9UJeQBDcOFxfz7PljfhBQ",
	"USYV/8ux9MXZD7joaynQBPv1R6C6MtOagDy4RfWAKmgNQ0Zgut5nN+2xtVlqK9G13mmlqLDMIT6sRV1i",
	"zDcck8D5GpTljTvWn4QnFGbrvfX5nylOz8Rf7+uLSfRItX7HDHwU+b/V+OLF8wd9L+mVrETyL6rzpmhc",
	"oWcIOWUmWoqeonbbQZxhfD8o3Tfu7FRl6aXQRF3b/LVN1BW6m08iVq/rvwMAAP//2MNiA1QYAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
