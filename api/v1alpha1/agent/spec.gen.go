// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/kubev2v/migration-planner/api/v1alpha1"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYzXLbNhB+FQ7aIyPKjnvRzVbzo2mTeuxJcsjoABErETEJoMDSGtejd+8AICRKhCjG",
	"tTPtTG8SsNj9sD/fLvhIclkpKUCgIZNHYvICKup+Xq5A4C1SrM0nxSiCXVRaKtDIwYnkGhgI5LT8pEu7",
	"gA8KyIQY1FysyCYlnEWXjVPbszUTSxndvgdtuBSRvU1KNPxZcw2MTL4GE3sK0wPEDt9O5zwNOuXiG+Ro",
	"7b3RWuruzSswhq6cSxiYXHOFDpWXT8J2egJkkJtvUjITS027lhhFalBq/48jVKYrtNQAU6pozvHh3VXL",
	"OVwgrEDbm6BEWp4UciunfOt2uxrTQxwxhzYLVGv6YP8X0uC1XIO2qeZvQxnj1p20vN675TG4Le1Wm7kG",
	"PS1rg6D3XHb0+BaLAFxLfdfnaXZv1hzzIpqcglYQ3QhuBVFXTXIKRrVNPsat2KJGcP+C+pTUwtRKSW03",
	"5mmkEkoqZmxwsBy2IQHxUfX+Mz2p9N66OrZ/aH8nfKi8G69uPrSikraLIXaVmbgHgVI/dOPGQ3X9rGFJ",
	"JuSnbEd8WcN6mS9B69scRJM+ffKfp17MnvDJ0iv9wXScEwx5BWkDM3a3D3ylqa2KmTF1LxlQY8CYCgRG",
	"czGX9d5OK64lXUB5OqO8WNo2FNQOSbBbWes80k3oKnSh7cX63OnVuC41Q6hilnINFIFduusupa4okolN",
	"IniFvIrQc2hYW9m6dh2iK9bOtP6UCoJ9/FC7BvsdQA8i4kDubttWGIvIoetiKSRzbjW04C6kLIGKwV6K",
	"YWwpPg6sf+hwaTJ7uTAdwt7upFvTMeiBC7rMM4Cj+RGdH27AOJdcaaB3TK5FV3/BDcqVplV8dvjOFlhx",
	"8ZmWNcSlDYIaQPlbJc0JT9xxcrANoafLvJXaMx9dlDBU7gvH4gvVgouV6T/zUWK/+oOb7ZwdoEdxngR1",
	"DEE8CyIkn6t6GobC/qbTTaGNmzrupqERPPG8nyGfcLgKrawdoz49h73PUmnbbTdAjRRPUSP/6cCpnm10",
	"1bR6skdPVdGgEhpeP7EJj3RNpbssDdfbZk47BV0Y9l15JMCx3OmWzMYxv39AljwHYdy1ffcll4rmBSTn",
	"o7Htk/bdSgpEZSZZtl6vR9Rtj6ReZc1Zk/0+m775ePvm1floPCqwKp3LOFpv7uay5LqkQoBOLq9nyavE",
	"9YoEBFOSuztuX66kFgyWXABzGahAUMXJhLwejUdn1g8UC+f2jCqe3Z9lfjDKHjnbZLuXs6qx+/z0fT/x",
	"UolcJliAh0KcqSb/GZkQ319br3xnWtMK/OD/9VD37Nc9bdyuWazhcTHxLX6XGahrSJtPCkPmhbk/DAav",
	"JHMtO5cCmzmWKlXy3MHPvhn/BWCnuq9muh8yNhufwkZJG1+r4Hw87nrzj99shM7HZ8e2LvypZ4HpvzQ4",
	"ZPumrihLbrxfvM2zl7f5SdAaC6n5Xz5LL8avX97oW6kXnDFwlHZx9gNc+04KsMZ++RFxnNn5UNAyuQV9",
	"DzoJgilBann2q58vydwuhdr3ZD+s+DWokuaH1W8U5HzJgSVeV4cIbvyx9uw9gAqC9qDzP0MHkTfGZr+j",
	"WaBH+OEZEcRS5H9WeWlWGV+8vMWPEt/KWrB/EbM0ZeqppQBaovuCuYIIjfjtJC8gv+uQxXt/dmj3bEFo",
	"rM4dfuOAemrxM1hGNvPN3wEAAP//bPmVHo8YAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
