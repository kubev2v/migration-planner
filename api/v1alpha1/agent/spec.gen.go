// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/kubev2v/migration-planner/api/v1alpha1"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
