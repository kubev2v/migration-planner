// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/kubev2v/migration-planner/api/v1alpha1"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RYTXPbNhD9Kxy0R0qU3fSim+3mQ5Mm9diT5JDRYU2uRMQkwAJLa9wM/3sHACFSIkQp",
	"bpxppzeJWOwuHt7uW/IrS2VZSYGCNJt/ZTrNsQT782KNgm4JqNYfqgwIzcNKyQoVcbQmqcIMBXEoPqjC",
	"PKDHCtmcaVJcrFkTM54FH2vrdmRpIVYyuPyASnMpAmtNzBT+WXOFGZt/9iF2HMZ7Gdv8Op/L2PuUd18w",
	"JRPvpVJSDU9eotawtpBkqFPFK7JZOfvIL8dHkvR2yyZmC7FSMIyUAYEmqdw/TljqodFKIV5BBSmnx9eX",
	"PXC4IFyjMichSVAcNbJPjmFrV4ce4/08QoC2D0ApeDT/c6npWm5QGaq500CWcQMnFNc7pzyUbs+78aav",
	"UV0VtSZUO5Ad3L7NRSBtpLofQ1pAiUFieuRQ1GXLP5GBMvzKuDG7qwmzHiTj2No4p+DnLsEdV4/c/BuD",
	"TGh9P35nvO98CO/w+nogxn3uho6yEA8oSKrHIczcF8PPCldszn5Kuj6VtE0qcRVjmkKKor3tMfuPV87M",
	"7HB3O2r9Tg/A8YGcg7hNM3S2d3ytwJB4oXU9WrugNWpdoqAgr1JZ76z07rWAOyyOV6szi/uBvNtTCHYr",
	"a5UGmj+svWhsDzYGp3NjRWVBWIYipQqBMLuwx11JVQKxuSERToiXgW7q9WVrW9e2oQ/N+kwbp5Q3bOLD",
	"ta51/hYfjyibbwRC0iSVQmBq6j9mG+DExXqykmrSyZFhE1qtidkaKEfjcMIFN4uTLv+Y1dWE5MQK8jL+",
	"Zv2srZR/A8Z7ZLL4WmDiwxLbRuhHCzFtnxKh0pApNx56Z7mTskAQJ99+6AA9x4cTG599LP0Xz0e//bR7",
	"DPChQ6n7HjfsqNnxTsEP+Hx3g9pCcqkQ7jO5EUP/Odck1wrK8AjzjUpccvERihrD1pqwOkHKtk7aHU6Q",
	"wk3PCN2Ier6SynV0uCvwVLtPnPJPoAQXaz2+572kcfd7J+vA9qkH8zya1KEMwiwIiFda1Vd+Nh0X0yGF",
	"GjsZ3V95gXvifjfKPmFz6SW6f0djfvY13UhEH7YbBC3FU9zIfzr3Vt9tglZQPhnRY1V0UgmdXj+hyZUN",
	"Q8UdS/3xtszpU9Bewy6UBy44xJ1hyTS28zsdLniKQmP3BsEuKkhzjM6nM6OT5vWZ5USVnifJZrOZgl2e",
	"SrVO2r06+X1x9fL97cvJ+XQ2zaksLGScDJrdvBldFyAEqujiehFNIqsVEYqsktyecfsCzWqR4YoLzCwD",
	"KxRQcTZnv0xn0zODA1BuYU+g4snDWeIGvuQrz5qkG3OqmoZvwU73I2cVyVVEObpUmA3V8j9jc+b0tfex",
	"wYZWUKJ7ofm873vx2443bp6ZXP1cMncS3zGDVI1x+2XjlHlh6TajpkuZWclOpaB2PoeqKnhq00++aPch",
	"onM9VjPD7ylN4yisK2nu1zg4n82GaP7x1tzQ+ezs0NILt+u7pOk+eNjMdkNdQhbdOFxczLPnj/lBQE25",
	"VPwvx9IXZz/goK+lQBPs1x+B6sJMawKK6BbVA6rIG8aMwHS9z27aY0vzyFeia72nlaLCqoB0vxZ1hSlf",
	"ccwi52tQljduW38SPqEwvXfv8z9TnIGJv9nVF5PogWr9jhmEKPJ/q/HZi+cP+l7SK1mL7F9U523RuELP",
	"EQrKTbQ1BoraLUdpjun9oHTfuL2nKksvhTbq0uavbaKu0N18krBm2fwdAAD//yVWP/MyGAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
