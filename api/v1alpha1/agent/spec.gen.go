// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/kubev2v/migration-planner/api/v1alpha1"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYwXLbNhD9FQ7aIyXKTnrRzXaSRtMm9cST5JDxYU2sRMQkwAJLa9wM/70DgJRIEaJk",
	"Ne60nd5kAth9eLt4ePA3lqqiVBIlGTb/xkyaYQHu58UKJdkfpVYlahLoPqcagZBfuKGl0gUQmzMOhBMS",
	"BbKY0WOJbM4MaSFXrI7tEo6SBOQfdW6XDWYI3otWVYKHAhkCqhwKlFXB5l+YVDRJlZSYEtolaxAk5Gqy",
	"VHqyTWtYzFBrpVnMVkAZ2oATIYUdnAj5gJKUfmQxq8oJqYndDYuZUZVOcbJSEtntXjgLuVTBTVUlfypT",
	"D6iNUDIQro6Zxt8roZHbfTt+Gjp6QHbZjjsF60La5truTN19xZQsDlf7Gxf1o1sS7IMDRfX0LZ5a2qfS",
	"fDRnx9HVhuvgDzH0CggMKR1ghgtz73c9wLrUiFdQQiro8efLzhQhCVeo7RxSBPnBSe5LkA3JlT5Mhhsd",
	"JhtA3ESM232F2HjtDteAiQKNgZUDytGkWpTkKuXnR+1wfABrO++2jtlCLjUEOG/L4f4ShIX78aPGJZuz",
	"H5KtyiWNxCXbCm74ZKA1PNq/M2XoWq1R20PggwLnwsKH/LqXel9xOvTYaOYa9VVeGULdg7h3+QaLRFor",
	"fd/f2c72H8xaUJoFW0JCEe6VtolaMTUEkoPmvtakxV3lVXUTPmaVNFVZKm0HQpr4kIMMNn+4/xy2UEft",
	"kuAb1fNnRg7OW0t1aHw3/3bybvBhvYb90KlK3G2+0FYWm/tlUDfRdvNYo/qWt9ymKJv2GZv/6cpPsysO",
	"H4NP78yAnDaRDxA3MEN7eydWGuypWBhT4ViLgjFoTNF4iqFHUFVvpFPXHO4wP9xRflrcTdSGPabBbpza",
	"B3C3NmiMRO+V6vgUd3Sk9xHdLhpvl3bi2NlX8lpjIUxPw+6UyhHkSeYlZFBc9v0OpIMhVCFfkXEX4qqz",
	"eD4Gd3fVsYpt6hD09ggODzw/ytsFY777gN6SXGqEe67Wchg/E4bUSkMRviKfePMUQn6CvMLwbENYHqG0",
	"myDNCq+X4TNpdXhE3N8o7QUH7nI8dt5nQdln0FLIlRlf817RePidnW3JbqEHcR4EtQ9BuAsC2pqW1VXr",
	"fca1fthCtTd2V63+nrjeG9UTFhftDdKt0Vic3SvHqlyXtg8IRslTwqi/6vPK7+YYNRQnM3roFB11hI4/",
	"PyFjxYap4m2XttvbdE63BV0Z+lTuKXCod4ZHpnbK79+OuUhRGrdtfzGyixLSDKPz6czeTfYhyzKi0syT",
	"ZL1eT8ENT5VeJc1ak/y6uHr9/ub15Hw6m2ZU5I4yQZbNrR2KrnOQEnV0cb2IJpG7KyKUvFRCdh/fc1ZJ",
	"jkshkbsOLFFCKdicvZjOpmeWB6DM0Z5AKZKHs8SFMsk3wetk+2guKxq+svylGflZkVpGlKGHwlyqpv/5",
	"Zmrn2e9SayjQ++0vu7EXr3rRhP1msba3/tw7gG1nkK4wbv6/dMR1Xd/6xWjoUnF3ZadKUuPFoCxzkTr4",
	"yVfjH//b0AedWs9T1LVvYVMq2dih89lsyOZvv9gKnc/O9g299Ku+C0z/oHbI+qkugUcfPC8+59nz5/wo",
	"oaJMafGH79KXsxfPn/SN0neCc5Q+48vnz/heUbRUlXR7/OnvKObCmkQJeXSD+gF11E6MGYEV2y/N6+PW",
	"fmoFwCv+UxTAuKO68a5WCSDyYfYIgbfei47bPSQGjbpsov5rBCHwyqj7d5oFukchviOCUH/8ryv/EV15",
	"8w+TleaYel3JEHJy/zpcYUBD3rrhKM0wvR/IhR9kx96fHQhN1luH3zigXlq8C0tYfVv/GQAA//8ZD5H9",
	"nhoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
