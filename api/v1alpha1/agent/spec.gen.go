// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/kubev2v/migration-planner/api/v1alpha1"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RYS3PbNhD+Kxy0R0pU0px0i92k0bR2PfbYOXh0WBMrETEJoMDSGtfD/94BIIqUCD3s",
	"OjcZwL6+/fZBv7BcVVpJlGTZ9IXZvMAK/M8vxijjfmijNBoS6I8rtBaW6H5ytLkRmoSSbBreJ+11yuhZ",
	"I5syS0bIJWualBn8pxYGOZveb9TMm5TN5MLA0BIHAkvKhL8EYWWHjxYG8Rw05IKe/zhzJ2u7QhIu0bAm",
	"ZaQIyqOP/MnLEbf97VBjuuvHfBO/eviBOXUWGBgDz+7vQlm6Uis0NwQUogHOhYMTyqutKPe529PutNkr",
	"NOdlbQnNFmR7xTe+SKSVMo+HkJZQxQDqkENZVw4jSyA5GM5SxoV79lAT8h4kh7H1dk7BLyQhhGsPZP6b",
	"QyZ2v2u/e7yrfAjvMH09ENM+d2OhzOQTSlLmeQizaIvhV4MLNmW/ZF2FZuvyzELFNCl7Cpk69Pbuwg5C",
	"dWLp2lTMvwuxNOCIOLO2Plh/YC1aW6GkKDdyVW/d9HJTwgOWxysuPEv7hlq1p5DkRtUmx6HfuUEg5J+9",
	"cwtlKiA2dWnDEYkq0r9SJ8JRkoDy1pTRaAXf0lbXgscUiX72D6e5fdik++vPElBt+xUoFY1yJSXmrvBS",
	"tgJBQi5HC2VGXRSOAuibfMqWQAU6hSMhhbscdU6mrNYjUiMHTqSKWwdmcqGi/tWavw7qHQZ4EH30m1i3",
	"bKa9ZPatxegR6HDjhW/9yyg1juX5TQns8vQ6BHfg2AtBz+lY6HcX12h9+GcG4ZGrlRzGXghLammgio/j",
	"V06VSsg7KGuMv7aE+oS2vFGylgjNNV78rmkfmARflQmdDR5KPPXdd0HFdzBSyKU9LHOp6LD6ncg6sFvX",
	"o34edWqfB3EWRJp4ruvzds86PEqGFGr8lH88bxv9G+XDWvYG4aodVf0cHdKzO9tca+3Ddo1glXyLGvV/",
	"dzj9btuggerNiB6ropNK6PT6iW1hbGgq7VjahrdhTp+CPg3bUO5JcIw7w5JpfL8PjbkUOUqL3TbMPmvI",
	"C0w+jidu9LhxwQoibadZtlqtxuCvx8oss7Wszf6anX+5vPky+jiejAuqSg+ZIIdmt3clVyVIiSb5fDVL",
	"RgksUVKCkmslfIxPaGz47Kolx4WQyD0DNUrQgk3Zb+PJ+IPDAajwsGegRfb0IQsJt9mL4E3WjSRd0/CT",
	"zqAuIcckPEvUIqECE6sxFwuBPAm6mLe7LgbOpuw6iPVnrffEQIVhV7/ftTT7faO91SncuXO/nf7TsAl0",
	"ZCFTY7r+ZD1h8WrmQRgtnSnuZ3euJK1XV9C6FLkPIvthley+ho+VUWSnaLZZ7Rz1B1YrxwGn8eNk8s4e",
	"BKvbuP79p6PFp3e0Ff4tEDF1Bjy5DvAGmx9+vs1bCTUVyoh/A/8/TT79fKOXir6qWnLfughcV7tna9rO",
	"3VlWIJRUOANLjJRVuE7yAvPHQfF8C7JxtgyT23NhbXXuXbZontpSC30pY828+S8AAP//STq/0vARAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
