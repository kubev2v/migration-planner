// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/kubev2v/migration-planner/api/v1alpha1"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
