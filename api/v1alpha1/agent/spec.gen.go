// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/kubev2v/migration-planner/api/v1alpha1"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RYT1PjNhT/Kh61RycOdE+5QcruZrZQBobdA5ODsF5iLbakSs9kKOPv3pFkYydWnJBl",
	"2+kNpKf35/d+74/zQlJZKClAoCHTF2LSDArq/jxbgcBbpFiaO8Uogj1UWirQyMGJpBoYCOQ0v9O5PcBn",
	"BWRKDGouVqSKCWfBY+PUDlzNxVIGr59AGy5F4K6KiYa/Sq6Bkel9Y2JDYbzlsfOv1bmIG53y4TukaO1d",
	"aC11P/ICjKErBwkDk2qu0Hnl5aPmOt7jZCO3qGIyF0tN+5YYRWpQav8fRyhMX2ipAWZU0ZTj86fzDjhc",
	"IKxA20hQIs33CrmTfdi6277GeNuPEKD1AdWaPtv/M2nwWq5BW6r5aChj3MJJ8+uNKHe529FutZlr0LO8",
	"NAh6A7Kdz199EYBrqR+HkBa0gCAxG+RAlEXNP8Gotvxi3Io9lAisA8kwts7OIfj5JPhwzUDmP1tkQvfb",
	"9lvhbeV9ePvp64AYd7kbCmUunkCg1M99mHlTDL9qWJIp+SVp+1RSN6nEV4xtCimIOttD8l9nXsy+8Lkd",
	"lL40PXAaQ15BXLsZiu2SrzS1JJ4bUw7WLjUGjClAYJBXqSw3bjp5zekD5Pur1YvFXUON2kMIditLnYab",
	"P0VgZ865pdQFRTK1KYcR8iLQ++KD58WrtrJ0Dbov1mXOMEUawSreXbvGZF/gec+kagpbSBylUghIbT3H",
	"ZE05crEaLaUetQFadoCbHTFZUczAKhxxwe3lqPU/JqUaoRy5AbuI3zwPSzea35CFLXI4fB0w8e6RWVvo",
	"WgsxxzPlh1eGo3J77EZxxNYQCr1pLf1GxvYb5Sys8/IGjIP0XAN9ZHIt+vozblCuNC3Cm8MbB2DBxVea",
	"lxCWNgjqgAnyqqR+4edAuNfY+TIwtD5K7RspfcjhULlvHLNvVAsuVmb4zZXEYfVbkbVgN64H/dzr1C4P",
	"wiwIzIxUlbNmJRyeYX0KVW4heZw1c+XI936DPOJx0UzGbo6G9GyPUtvJu7DdADVSHKNG/ui6qd5tcdW0",
	"OBrRfVV0UAkdXj+hhZH0TcUtS5vwXpnTpaBLwyaUOxIc4k6/ZCo3Q3yzz3kKwkC7uJMzRdMMotPxxI4z",
	"O4JIhqjMNEnW6/WYuuux1KukfmuSP+azi6vbi9HpeDLOsMgdZBwtmu2aF13nVAjQ0dn1PBpF1H48RyCY",
	"ktzF+PrdSkrBYMkFMMdABYIqTqbkt/FkfGJxoJg52BOqePJ0kjhVJnnhrEraKadK7H98+vEcealILiPM",
	"wLtCnKma/4xMiZ/PnW98Z1rTAvx3xP227vnvG9q4PbO+NuvD1K8SLTNQlxDXPygcsNRVC/8YDJ5L5oZ/",
	"KgXWazFVKuepcz/5bvz3f6t6qGb6P2NUlaewUdLm1yo4nUz6aP75xWbodHKy6+qDv3oXN/3vDM6zTVN3",
	"gpaYSc3/9oz5cDL5+UY/SQGu0JHaHnBPfNoX9qjhpW9EhxFTg8ppus1MoyDlSw4s8rp6JL3xz7p75QE0",
	"bbQ3Ov83VA3sz9Vmt7WO7uDuO3oQYkTD+H+BfOeURTce3v+uyiYffr7RK4kfZSnYRqXVtPWllgHNMbMG",
	"VhAoK38dpRmkj73i+ezfHtrpOi7UVhfOZQP6qSk1Py8TUi2qfwIAAP//mCERXjkWAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
