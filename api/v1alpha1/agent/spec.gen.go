// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/kubev2v/migration-planner/api/v1alpha1"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RYTW/jNhD9KwLbo2w56fbiW+Luh7FNGiTI7iHwgZHGEjcSyZKjGGng/16QFG3ZomVt",
	"mixa9GaLw5nh45t5Iz2TVFRScOCoyfSZ6LSAitqfZzlwvEGKtb6VGUUwD6USEhQysCapggw4MlreqtI8",
	"wCcJZEo0KsZzso4Jy4KPtXXbszTnSxFcfgSlmeCBtXVMFPxZMwUZmd75EDsO472MbX5bn4vY+xT33yBF",
	"E++9UkJ1T16B1jS3kGSgU8Uk2qycfeSX4yNJervFOiZzvlS0GymjSDUK5f4xhEp3jZYKYEYlTRk+fTxv",
	"gcM4Qg7KnAQF0vKokX1yDFu72vUY7+cRArR5QJWiT+Z/ITReiRUoQzV3GpplzMBJy6udUx5Kt+XdeNNX",
	"oGZlrRHUDmQHt29y4YAroR76kM4e9YphWgTJyWkFwQUPK/C6asjJM6oM+TJmzO5rBPvPu49JzXUtpVBm",
	"YREHKqGkfJ4Nviyb25ALcbfq8NM9VPpkoA6t78ffGu87795Xlw+tW4nbxRA6ypw/Akehnrr3xnx1/axg",
	"Sabkp2Tb+JKm6yWuBA22KfCGPn32X2bOzOxwZOm1vtAdcHwg5yBu0gyd7YLlipqqmGtd9zYDqjVoXQHH",
	"IBdTUe+stO61pPdQHmeUM4vbgbzbIQS7EbVKA2pCc69Cm4P1wencWJWaI1ShSKkCipCd2eMuhaookqkh",
	"EYyQVYH27AVrY1vXViG6Zm2m9VPKG/b1B62Lz/B0RCp98+ACR6ngHFLXM1aUIeP5aCnUaKtvhk1gxSsm",
	"OcUCjMMR48wsjrb5x6SWIxQjq/ChPnNEkGs7G3wHxntksvhaYOLDmt1EaEcLMW2fEqHSECkzHlpnuRei",
	"BMoH337oAC3HhxPrH6Ys/edvR7/9tFsM8KFDqfse1+2oA7SHHfB5cQ3aQnKugD5kYsW7/gumUeSKVuGZ",
	"6DulvWL8Cy1rCFtrBDlAyjZOmh1OkMJNzwhdj3p+EMp1dHpfwlC7rwyLr1RxxnPdv+dSYL/7vZNtwfap",
	"B/M8mtShDMIsCIhXKuuZH3b7xbRLobWdph5mXuBeuN/Nxi/YXHmJbt9Rn599TTcS0YbtGqgW/CVuxD8d",
	"pOWrjeSKVi9G9FgVDSqh4fUTmlxJN1S8Zak/3oY5bQraa9iF8sAFh7jTLZm17fxOh0uWAtf22G6qIGeS",
	"pgVEp+OJ0UnzPk4KRKmnSbJarcbULo+FypNmr05+n8/eX968H52OJ+MCq9JCxtCguZ03o6uScg4qOrua",
	"R6PIakUEPJOC2TNu3shJzTNYMg6ZZaAETiUjU/LLeDI+MThQLCzsCZUseTxJ3MCXPLNsnWzHHFlj97Xa",
	"6X7krCKxjLAAlwqxoRr+Z2RKnL62vl7Y0IpW4F5o7vZ9z3/b8cbMM5Orn0umTuK3zEBVQ9x8KhkyLyzc",
	"ZtB4LjIr2ang2MznVMqSpTb95Jt2Xza2rvtqpvuBZr12FNZSmPs1Dk4nky6af3w2N3Q6OTm09M7tepU0",
	"3RcUm9luqHOaRdcOFxfz5O1j3nJaYyEU+8ux9N3JDzjoR8HBBPv1R6A6N9Map2V0A+oRVOQNY4LUdL07",
	"N+2RhXnkK9G13mGlqECWNN2vRS0hZUsGWeR8dcry2m1rT8IDCtN79z7/M8UZmPjXu/piEj1Qra+YQYgi",
	"/7can7x7+6CXAj+Immf/ojpvisYVegG0RPvVModAUbvlKC0gfeiU7ie3d6iytFJooi5s/tom6grdzScJ",
	"WS/WfwcAAP//W+evQYMYAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
