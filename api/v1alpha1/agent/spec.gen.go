// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/kubev2v/migration-planner/api/v1alpha1"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RYS1PjOBD+Ky7tHp04sHPKDdh5pGZhKSiYA5VDY3diDbbkldqkWMr/fUuSHTux4oQM",
	"s1t7I1arH19//RCvLJZ5IQUK0mz6ynScYg72z7MlCroloFLfFQkQmo+FkgUq4mhFYoUJCuKQ3anMfKCX",
	"AtmUaVJcLFkVMp54P2urduBoJhbSe/yMSnMpPGdVyBT+VXKFCZs+NCY2FIZbHlv/Wp3zsNEpH79jTMbe",
	"R6Wk6keeo9awtJAkqGPFC7JeOfmgOQ73ONnIzauQzcRCQd9SAgSapHK/OGGu+0ILhXgBBcScXj6fd8Dh",
	"gnCJykRCkiDbK2S/7MPWnvY1htt++ACtP4BS8GJ+p1LTtVyhMlRz0UCScAMnZNcbUe5yt6PdaNPXqC6y",
	"UhOqDch2Xl/7IpBWUj0NIS0gRy8xG+RQlHnNP5GAMvxKuBF7LAmTDiTD2Fo7h+DnkuDC1QOZ/2KQ8Z1v",
	"22+Ft5X34e2nrwNi2OWuL5SZeEZBUr30YeZNMfyqcMGm7Jeo7VNR3aQiVzGmKbhMDcneX+peqOZaWJvy",
	"+XfJlwoMEWdal4P1B1qj1jkK8nIjluXGSSc3GTxitr/inFjYNdSoPYQkt7JUsb+BA2FyZp1bSJUDsalJ",
	"G46I557+FR7c89faytI22b5YN/vDaW4Eq3B3/WmdfsWXPdOmKU4haRRLITA2NRmyFXDiYjlaSDVqAzTs",
	"QNv/Q7YEStEoHHHBzeGo9T9kZTEiObJDch6+eaaVdry+IQtb5LD4WmDC3WOvttC1tgbNRyFHmR+e/0cl",
	"+dj14IgVwBf6/eUNahv+uUJ4SuRK9GNPuSa5VJD7R/YbJ0/OxT1kJfqlNWFxQOteK6lvuAbsbxCmsQ9M",
	"i09Sue4HjxkeKveNU/oNlOBiqYfvXEkaVr8VWQt247rXz71O7fLAzwJPo4+L8qLZxYbHTZ9Cld0Eni6a",
	"YXDkfbe6HXE5b8ZZN0dDerbnn2m/XdhuELQUx6iRP7rnFe+2MSrIj0Z0XxUdVEKH149vU2N9U2HL0ia8",
	"NXO6FLRp2IRyR4J93OmXTGX7vWvMGY9RaGw3ZnZWQJxicDqemBlkxgVLiQo9jaLVajUGezyWahnVd3X0",
	"x+zi49Xtx9HpeDJOKc8sZJwMmu1uFlxnIASq4Ox6FowCMK/WAEVSSG5jXD8YWSkSXHCBiWVggQIKzqbs",
	"t/FkfGJwAEot7BEUPHo+iawqHb3ypIraiVSU1H/1uZkaOKlALgJK0bnCrKma/wmbMjdLO49ra1pBjm6B",
	"f9jWPft9Qxs334yvzcyfuvnfMoNUiWH9kj9gE6vm7jJqOpeJHdSxFFTvslAUGY+t+9F37R7ereqhmun/",
	"/6CqHIV1IU1+jYLTyaSP5p9fTYZOJye7jj64o3dx0z3wrWebpu4ElJRKxf92jPlwMvn5Rj9LgbbQCUwP",
	"eGAu7XPzqeGla0SHEVNhkUG8zUxdYMwXHJPA6eqR9MZd6+6AB9C00d7o/N9Q1bPrVpvd1ji6g7vv6IGP",
	"EQ3j/wXynUMS3Dh4/7sqm3z4+UavJH2SpUg2Kq2mrSu1FCGj1BhYoqes3HEQpxg/9Yrni7t7aKfruFBb",
	"nVuXNarnptTcvIxYNa/+CQAA//+/V/b1shUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
