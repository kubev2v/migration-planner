// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/kubev2v/migration-planner/api/v1alpha1"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"2lGghFR31Z8BAAD//+6sZgaFHAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
