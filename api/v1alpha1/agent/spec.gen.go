// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/kubev2v/migration-planner/api/v1alpha1"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
