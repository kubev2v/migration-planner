// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/kubev2v/migration-planner/api/v1alpha1"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
