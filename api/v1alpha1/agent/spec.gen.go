// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/kubev2v/migration-planner/api/v1alpha1"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"W1jC6tv6zwAAAP//CIOEW/UbAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
