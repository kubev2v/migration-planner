// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/kubev2v/migration-planner/api/v1alpha1"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//3pafQ8HHAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
