// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/kubev2v/migration-planner/api/v1alpha1"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYQXPbNhP9Kxx835ESZSe96Ga7SaNpk3riSXLI+LAmViJiEmCBpTVuhv+9A4CUKBGi",
	"aNXutJ3ebGKx+/B28Xah7yxVRakkSjJs/p2ZNMMC3J8XK5Rk/yi1KlGTQPc51QiE/MItLZUugNiccSCc",
	"kCiQxYweS2RzZkgLuWJ1bLdwlCQg/6Rzu61nIfiOt6oSPOTIEFDlUKCsCjb/yqSiSaqkxJTQblmDICFX",
	"k6XSk21Yw2KGWivNYrYCytA6nAgp7OJEyAeUpPQji1lVTkhN7GlYzIyqdIqTlZLIbg/CWcilCh6qKvlT",
	"mXpAbYSSAXd1zDT+VgmN3J7b8dPQsQNkn+24k7AupG2s7cnU3TdMyeJwub9xXj+5LcE6OJJUT9/iqal9",
	"Ks2jORtHV+uugz/E0BtXTj1WCjQGVo4ujibVoiSHzdtH7XJ8BGprd1vHbCGXGvqROBAYUtr/JwgL0zda",
	"asQrKCEV9PjTZYciIQlXqO1JSBHkR43cl2MMu9W+x3gfR4jQ5gNoDY/2/0wZulZr1LYM/WmAc2HphPx6",
	"55SH4Ha8W2/mGvVVXhlCvUPZwe0bLBJprfT9ENP8wawFpVmwRCUUGFxoaW3lzBBIDtreEC6s2V3ldW3j",
	"PmaVNFVZKm0XQqr0kIP0l25Ushy2MQnxWfX8mYFSemepDq3vx98a7zvv56tfD52sxN3LEDrKYqPwvbyJ",
	"9nb9X+OSzdn/km1DTJpumPgraLlNUTblM2T/+cqb2R2+WAat35seOW0g7yBuYIbO9l6sNNhbsTCmGhQD",
	"MAaNKZqu3u/SqtpZ6eQ1hzvMj1eUN4u7gVq3YwrsxultAHc7iAyR6KeVOj5lPhk5fYhuFQ2XS2s4dPeV",
	"vNZYCLOjYXdK5QjypPEhNCK46IdngA6GUIZ8RobnAJedxcsxuH+qzrDWhg5Bb69g/8LzUdNV0Of7j+iH",
	"gkuNcM/VWvb9Z8KQWmkowi37iZ2nEPIz5BWGrQ1hOUJpN06aHV4vw3fS6vCAuL9V2gsO3OU41u6LoOwL",
	"aCnkygzv+aBo2P3eybZkt9CDOI+COoQgXAUBbU3L6qqdxYa1vl9CtWv291et/p64349uJ2wu2g7SzdGQ",
	"n/2WY1WuS9tHBKPkKW7Un53zymebGDUUJzN67BaNukLj709osGL9UPG2StvjbSqnW4IuDbtUHkhwqHb6",
	"V6Z2yu9fb7lIURp3bN8Y2UUJaYbR+XRme5N9SrKMqDTzJFmv11Nwy1OlV0mz1yS/LK7efLh5MzmfzqYZ",
	"FbmjTJBlczsORdc5SIk6urheRJPI9YoIJS+VkN3n75xVkuNSSOSuAkuUUAo2Z6+ms+mZ5QEoc7QnUIrk",
	"4SxxrkzyXfA62T5by4r6rz7fNCNvFallRBl6KMyFauqfb0w7D28XWkOBft7+uu978eOON2G/Waxt15/7",
	"CWBbGaQrjJtfeEa06/rWb0ZDl4q7lp0qSc0sBmWZi9TBT74Z//zeuj46qe3MFHXtS9iUSjbj0Pls1mfz",
	"159ths5nZ4eWXvtdzwLTP/Adst1Ql8Cjj54XH/Ps5WN+klBRprT43Vfp69mrlw/6Vuk7wTlKH/H1y0f8",
	"oChaqkq6M/7wVyRzYYdECXl0g/oBddQaxozAiu3X5vVxaz+1AuAV/ykKYNxV3cyuVgkg8m4OCIEfvRed",
	"afeYGDTqsvH6jxGEwCuj3u1pFugBhXhGBKH6+E9X/iW68vZvJivNNfW6kiHk5H46XGFAQ9655SjNML3v",
	"yYVfZGP7ZwdCE/XW4TcOqJcWP4UlrL6t/wgAAP//fJxNlyAaAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
