// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/kubev2v/migration-planner/api/v1alpha1"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
