// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/kubev2v/migration-planner/api/v1alpha1"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
