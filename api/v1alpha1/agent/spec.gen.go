// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/kubev2v/migration-planner/api/v1alpha1"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"tw6/cUA9tfgtLGH1bf1nAAAA//8T5QJ9LhwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
