// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/kubev2v/migration-planner/api/v1alpha1"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RYX1PjNhD/Kh61j04cKE95A8rdZa5QBgbugcnDYm9iHbbkSmsylPF370iysRMrTshx",
	"7fSNWKv989vf/hGvLJZ5IQUK0mz6ynScYg72z9MlCroloFLfFQkQmo+FkgUq4mhFYoUJCuKQ3anMfKCX",
	"AtmUaVJcLFkVMp54P2urduBoJhbSe/yMSnMpPGdVyBT+VXKFCZs+NCbWFIYbHlv/Wp3zsNEpH79jTMbe",
	"hVJS9SPPUWtYWkgS1LHiBVmvnHzQHIc7nGzk5lXIZmKhoG8pAQJNUrlfnDDXfaGFQjyHAmJOL5/POuBw",
	"QbhEZSIhSZDtFLJfdmFrT/saw00/fIDWH0ApeDG/U6npWq5QGaq5aCBJuIETsuu1KLe529FutOlrVOdZ",
	"qQnVGmRbr7/5IpBWUj0NIS0gRy8xG+RQlHnNP5GAMvxKuBF7LAmTDiTD2Fo7++DnkuDC1QOZ/2KQ8Z1v",
	"2m+FN5X34e2nrwNi2OWuL5SZeEZBUr30YeZNMfyqcMGm7Jeo7VNR3aQiVzGmKbhMDcneX+peqOZaWJvy",
	"+XfJlwoMEWdal4P1B1qj1jkK8nIjluXaSSc3GTxitrvinFjYNdSo3Yckt7JUsb+BA2Fyap1bSJUDsalJ",
	"G46I557+Fe7d89+0laVtsn2xbvaH09wIVuH2+tM6/YovO6ZNU5xC0iiWQmBsajJkK+DExXK0kGrUBmjY",
	"gbb/h2wJlKJROOKCm8NR63/IymJEcmSH5Dx890wr7Xh9RxY2yGHxtcCE28debaFrzcccx5QfHvsH5fbQ",
	"reCAye8L/f7yBrUN/0whPCVyJfqxp1yTXCrI/ZP6nQMn5+IeshL90pqw2KNjvympb7i+6+8Lpp8PDIlP",
	"UrmmB48Z7iv3jVP6DZTgYqmH71xJGla/EVkLduO618+dTm3zwM8CT3+Pi/K8WcGGp0yfQpVdAJ7Omxlw",
	"4H23sR1wOW+mWDdHQ3o2x57pul3YbhC0FIeokT+63hUftigqyA9GdFcV7VVC+9ePb0FjfVNhy9ImvDfm",
	"dClo07AO5ZYE+7jTL5nK9nvXmDMeo9DYLsrstIA4xeB4PDGjx4wLlhIVehpFq9VqDPZ4LNUyqu/q6I/Z",
	"+cXV7cXoeDwZp5RnFjJOBs12JQuuMxACVXB6PQtGAZjHaoAiKSS3Mb69E1kpElxwgYllYIECCs6m7Lfx",
	"ZHxkcABKLewRFDx6PoqsKh298qSK2olUlNR/7LlRGjipQC4CStG5wqypmv8JmzI3SztvamtaQY5ub3/Y",
	"1D37fU0bN9+Mr82on7qx3zKDVIlh/YDfYwGr5u4yajqTiR3UsRRUr7BQFBmPrfvRd+3e263qoZrp/9ug",
	"qhyFdSFNfo2C48mkj+afX02GjidH245O3NGHuOne9dazdVN3AkpKpeJ/O8acHE1+vtHPUqAtdALTAx6Y",
	"S/vcfGp46RrRfsRUWGQQbzJTFxjzBcckcLp6JL1x17o74B40bbQ3Ov83VPXsutV6tzWObuHuB3rgY0TD",
	"+H+BfGeQBDcO3v+uyiYnP9/olaRPshTJWqXVtHWlliJklBoDS/SUlTsO4hTjp17xfHF39+10HRdqq3Pr",
	"skb13JSam5cRq+bVPwEAAP//0i8j+akVAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
