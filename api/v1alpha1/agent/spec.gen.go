// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/kubev2v/migration-planner/api/v1alpha1"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYzXLbNhB+FQ7aIyPKjnvRzXbzo2mTeuxJcsjosCJWImISQIGlNW5G794BIEqUCFGM",
	"G2famd4kYLH7YffbH/Ary1WllURJlk2+MpsXWIH/eblESXcEVNsPmgOhW9RGaTQk0IvkBjlKElB+MKVb",
	"oEeNbMIsGSGXbJ0ywaPL1qvt2ZrKhYpuP6CxQsnI3jplBv+shUHOJp8bE3sK0wPEHt9O5yxtdKr5F8zJ",
	"2XtljDLdm1doLSy9Szja3AhNHlWQT5rt9ATIRm62TtlULgx0LXEgsKRM+CcIK9sVWhjEa9CQC3p8c9Vy",
	"jpCESzTuJqQIypNCfuWUb/1uV2N6iCPm0M0CGAOP7n+hLN2oFRpHtXAb4Fw4d0J5s3fLY3Bb2p02e4Pm",
	"uqwtodlz2dHjWywSaaXMfZ+n+YNdCcqLKDklVBjdaNyKsq425JQcjCMfF05sXhP6f436lNXS1lor4zZm",
	"aSQTSpBTPjhYHtuQgISoBv/ZHiq9da6O7R/a3wkfKu/Gq8uHVlTSdjLErjKVDyhJmcdu3ESTXT8bXLAJ",
	"+ynbFb5sU/WykIKuCFVgfO3DU0fudpIuJjnKDe36Dn28DmLuRCBZr/Q723FqYygoSDfXi/nknVgacNk0",
	"tbbuLSJgLVpboaQoh3NV7+20+FDCHMvTTAxiadtQo3YIMe/2grK9RLxakKlxiE5VmzzS2WDZdMStnV4W",
	"eDW+Y04Jq5il3CAQ8kvvwoUyFRCbOELjCxJVpFU0zXMrW9e+W3XF2qzvp3cj2Ferat/svwHoQZQ9yN1t",
	"2wpjUT50XYyWKhdOQwvuXKkSQQ72UgxjS/FxYP0DkKfJ9PnCdAh7u5NuTcegN/WlWwUH9AtxROe7W7Te",
	"JVcG4Z6rlezqL4QltTRQxeeYb2zHlZAfoawxLm0J9YD2s1WyORGaSLzguObU0/FeKxOqKcxLHCr3SVDx",
	"CYwUcmn7z7xX1K/+4GY7ZzfQozhPgjqGIM6CSOPIdX3dDKj9jaxLobWfgO6vm+byxPNhnn3C4appj+0Y",
	"9ek57KeulLbddotglXyKGvVPh1/93cZoA9WTPXoqiwal0PD8iU2brGsq3bG0ud6WOW0K+jDsu/JIgGPc",
	"6abM2lf+8JgtRY7S+muH7ssuNeQFJuejseuT7g3NCiJtJ1m2Wq1G4LdHyiyzzVmb/T69fvX+7tWL89F4",
	"VFBVepcJct7czXrJTQlSokkub6bJi8T3igQl10r4O25f0ayWHBdCIvcM1ChBCzZhL0fj0ZnzA1Dh3Z6B",
	"FtnDWRYGo+yr4Ots94rXNXWfwqHvJ0EqUYuECgxQmDe14T9nExb6a+uLgzdtoMLwCPl8qHv665424dYc",
	"1uahMwktfseMMA8G6g6ZF2bhMFq6Uty37FxJ2szGoHUpcg8/+2LD14id6r6c6X5UWa8Dha1WLr5Owfl4",
	"3PXmH7+5CJ2Pz45tXYRT3wVm+Orhke2bugKe3Aa/BJtnz2/zg4SaCmXEX4GlF+OXz2/0tTJzwTn6knZx",
	"9gNc+0ZJ/4b85UfEcermQwllcofmAU3SCKaMwNXZz2G+ZDO31OR+KPbDkt+gLiE/zH6rMRcLgTwJujqF",
	"4DYca8/eA0pBo73R+Z8pB5E3xnq/ozmgR+rDd0QQo8j/VeW5q8r44vktvlf0WtWS/4sqyyZNQ2kpEEry",
	"X1OXGCkjYTvJC8zvO8XibTg7tHu2IGyszjx+64GG0hJmsIytZ+u/AwAA//+0a2WKGxkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
