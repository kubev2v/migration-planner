// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/kubev2v/migration-planner/api/v1alpha1"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RYTVPjOBP+Ky6979GJAzun3ICdj9QsLAUFc6ByaKxOrMGWvFKbFEv5v29JsokTK05g",
	"mNnaG7Fa/fH00x/imaWqKJVESYZNn5lJMyzA/XmyREnXBFSZm5IDof1YalWiJoFOJNXIUZKA/Ebn9gM9",
	"lcimzJAWcsnqmAke/Gyc2oGjmVyowHEdM41/VUIjZ9O7Vs3GpXjLK+fDPG41qfvvmJI19FFrpfsxFWgM",
	"LF2wHE2qRUlCSTb18lF7HO9xrZWb1zGbyYWGviUOBIaU9r8EYWH6QguNeAYlpIKePp92IBGScInaRkKK",
	"IN8r5L7sQ9Sd9jXG236EAG0+gNbwZH9nytClWqG2JPLRAOfCwgn55UaUu9ztaLfazCXqs7wyhHoDsp3X",
	"X3yRSCulH4aQllBgkJEtciiromGd5KA5ixkXVuy+IuxybBhbZ+cQ/HwSfLhmIPNfLDKh8237a+Ft5X14",
	"++nrgBh3uRsKZSYfUZLST32YRVsM/9e4YFP2v2TdgZKm/SS+YuqYPfpMDcnenpteqPZa3JgK+Xculhos",
	"EWfGVIP1B8agMQVKCnIjVdXGSSc3Odxjvr/ivFjcNdSqPYQk16rSabg1AyE/cc4tlC6A2NSmDUckikD/",
	"ig/u5i/aqkrwkCLRzf5wmlvBOt5df8ZkX/Fpzxxpi1MqGqVKSkxtTcZsBYKEXI4WSo/WAVp2oOv/MVsC",
	"ZWgVjoQU9nC09j9mVTkiNXLjbx6/clrZ2/x1Wdgih8PXARPvHnaNha61F9BCFPKU+eHJ/qYk/8LBHwr9",
	"9vwKjQv/VCM8cLWS/dgzYUgtNRThkf3KyVMIeQt5hWFpQ1ge0LpflDQ3fAMONwjb2AemxSelffeD+xwP",
	"lfsmKPsGWgq5NMN3LhQNq9+KbA1263rQz71O7fIgzIJAo0/L6qzdxYbHTZ9CtdsEHs7aYfDG+351e8Pl",
	"oh1n3RwN6dmef7b9dmG7QjBKvkWN+tE9r3y3jVFD8WZE91XRQSV0eP2ENjXWNxWvWdqG98KcLgVdGjah",
	"3JHgEHf6JVO7fu8bcy5SlAbXGzM7KSHNMDoeT+wMsuOCZUSlmSbJarUagzseK71Mmrsm+WN29vHi+uPo",
	"eDwZZ1TkDjJBFs31bhZd5iAl6ujkchaNIrDv0QglL5VwMT6iNv5pVkmOCyGROwaWKKEUbMp+G0/GRxYH",
	"oMzBnkApksejxKkyybPgdbKeSGVF/Vefn6mRl4rUIqIMvSvMmWr4z9mU+VnaeTY70xoK9Av83bbu2e8b",
	"2oT9Zn1tZ/7Uz/81M0hXGDdv9AM2sXruL6OhU8XdoE6VpGaXhbLMRercT74bJdfP/3010//PQF17CptS",
	"2fxaBceTSR/NP7/aDB1PjnYdffBH7+Kmf+A7zzZN3UioKFNa/O0Z8+Fo8vONflYSXaET2B5wx3za5/ZT",
	"y0vfiA4jpsYyh3SbmabEVCwE8sjr6pH0yl/r7oAH0LTV3ur8z1A1sOvWm93WOrqDu+/oQYgRLeN/AflO",
	"gUdXHt5/r8omH36+0QtFn1Ql+UalNbT1pZYh5JRZA0sMlJU/jtIM04de8Xzxdw/tdB0XGqtz57JB/diW",
	"mp+XCavn9T8BAAD//0D8vX6MFQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
