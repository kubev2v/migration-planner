// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/kubev2v/migration-planner/api/v1alpha1"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"86GanlMhAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
