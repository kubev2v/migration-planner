// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/kubev2v/migration-planner/api/v1alpha1"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYUW/jNgz+K4a2R1+c9rqXvLVZexds7YIWvXso8qBYTKyrLWkS3aAr8t8HSXbixIrj",
	"69rDBuwtkSiSIj9+pPxCUlkoKUCgIaMXYtIMCup+ni9B4B1SLM29YhTBLiotFWjk4ERSDQwEcprf69wu",
	"4LMCMiIGNRdLso4JZ8Fl49R2bE3EQga3n0AbLkVgbx0TDX+WXAMjo4faxI7CeM9j599W5yyudcr5N0jR",
	"2rvUWur2zQswhi5dSBiYVHOFzisvH9Xb8REna7nZOiYTsdC0bYlRpAal9v84QmHaQgsNMKaKphyfP100",
	"gsMFwhK0vQlKpPlRIbdyLLZut60x3vcjFNBqgWpNn+3/TBqcyhVoCzV/G8oYt+Gk+XTnlofcbWi32swU",
	"9DgvDYLeCdnB4xtfBOBK6seuSLMns+KYZkFwClpAcKMOK4iyqMApGNUWfIxbsXmJ4P7V6mNSClMqJbXd",
	"mMWBSsipmLDeyXK+9UmIz6qPn+mA0mcb6tD+vv2t8L7ydr7aeGhkJW4WQ+gqE/EEAqV+bueN19X1s4YF",
	"GZGfki3xJRXrJb4EbWxTEBV8uuS/jL2YPeHB0il9bVrBqQ15BXHlZuhu13ypqa2KiTFlJxlQY8CYAgQG",
	"sZjKcmenkdecziE/jigvFjcN1Wr7AOxOljoNdBO6rLvQ5mJd4fRqXJeaIBQhS6kGisDO3XUXUhcUyciC",
	"CD4gLwL0XDesjWxZug7RFmsirRtStWAXP0gx1VBws8NzcylzoMLul64Bf8dF9jLmLrGNRlPhjvFQ+vbj",
	"HMKbTLlVF3a+V0hDDjcUH3ase0JxmJq8X0733d7sxBvTIddr4mjTVA9C5wd0Xt+CcSG50EAfmVyJtv6M",
	"G5RLTYvwoPGd/bLg4gvNSwhLGwTVoz9slFQnPMuHmcR2j46WdCW1p0k6z6Gv3FeO2VeqBRdL033mRmK3",
	"+r2bbYNdux7086hThzwIoyDQEVJVjusJsrtDtSG0diPK47juGq887wfOVxwu6r7XzFGXnv1GaXm3GbZb",
	"oEaK16iR/3Q6VW8252pavDqix6qoVwn1r5/QOEjapuItSuvrbZDThKBLw24oDyQ4hJ12yawd8/vXZs5T",
	"EMZd27dqcq5omkF0OhjapmkfuSRDVGaUJKvVakDd9kDqZVKdNcnvk/Hlzd3lh9PBcJBhkbuQcbTR3A5x",
	"0TSnQoCOzqeT6EPkekUEginJ3R03z1xSCgYLLoA5BCoQVHEyIh8Hw8GJjQPFzIU9oYonTyeJn6KSF87W",
	"yfaZrUpsv1X9EBB5qUguIszAu0KcqQr/jIyI76+NTwLOtKYF+FfCw77uya872rhds77WL5GRb/FbZKAu",
	"Ia6+P/SZF2b+MBi8kMy17FQKrIZeqlTOU+d+8s34zwVb1V010/7qsV57CBslRTWgnQ6H7Wj+8ZvN0Onw",
	"5NDWmT/1Jm76zxLOs11TF5RFtz4u3ubJ+9u8F7TETGr+l0fp2fDj+xu9knrOGQNHaWcnPyC0n6QAa+yX",
	"H5HHiZ0PBc2jO9BPoKNaMCZILc8++PmSzOxSXfue7PsVvwaV03S/+o2ClC84sMjrahHBrT/WnL17UEGt",
	"vdb5n6GDwBtjvdvRrKMH+OENPQhB5H9WeW9WGZ69v8UbiVeyFOxfxCxVmXpqyYDm6D53LiFAI347SjNI",
	"H1tk8dmf7ds9Gy5UVmfOf+Mc9dTiZ7CErGfrvwMAAP//zYIt9LwYAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
