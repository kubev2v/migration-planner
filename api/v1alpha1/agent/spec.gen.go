// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/kubev2v/migration-planner/api/v1alpha1"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
