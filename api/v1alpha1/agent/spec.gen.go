// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/kubev2v/migration-planner/api/v1alpha1"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"nwEAAP//CeEfRSMdAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
