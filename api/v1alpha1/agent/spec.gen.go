// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/kubev2v/migration-planner/api/v1alpha1"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"FyEAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
