// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	externalRef0 "github.com/kubev2v/migration-planner/api/v1alpha1"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYTXPbNhP+Kxy875EWZce96Ga7iaNpPjx2nRwyOqzIlYiYBFhgaY3q4X/vACAlSoQo",
	"xo0z7aQnW8Bi98Gzn+ATi2VeSIGCNJs8MR2nmIP992KJgu4IqNT3RQKEZrFQskBFHK1IrDBBQRyye5WZ",
	"BVoXyCZMk+JiyaqQ8cS7rK3anq2pWEjv9iMqzaXw7FUhU/hHyRUmbPKlMbGjMNxDbPFtdc7CRqecf8WY",
	"jL3XSknVvXmOWsPSUpKgjhUvyKJy8kGzHR4B2cjNqpBNxUJB11ICBJqkcr84Ya67QguFeAUFxJzW15ct",
	"crggXKIyNyFJkB0VsivHuLW7XY3hPg4fofUCKAVr8zuVmm7kCpUJNXcbSBJu6ITsZueWh+C2tBtt+gbV",
	"VVZqQrVD2cHjGywCaSXVQx/TyaNecYpTb3AKyNG70dCKoszr4BQJKBN8CTdi85LQ/mrUh6wUuiwKqczG",
	"LPRkQgZimgx2lsU2xCHOq44/3RNKbw3Vvv19+1vhfeVdf3XjoeWVsJ0MvqtMxSMKkmrd9Rtvsuv/Chds",
	"wv4XbQtfVFe9yKWg4TZGUYdPn/ynKydmTrhg6ZV+rzvkNIacgrCG6bvbe75UYLJiqnXZWwxAa9Q6R0He",
	"WIxlubPT8msGc8yOR5QTC9uGGrVDAuxOlir2dBNYNl1oc7E+Op0a26WmhLnPUqwQCJMLe92FVDkQm5gg",
	"whPiuac8Nw1rI1uWtkN0xdqR1h9SjWBffZDiRmHO9U6dm0uZIQizX9oG/A0X2fOYvcSWjbbCHeM+9+3z",
	"7Is3GXOjzg9+EKU+wC3Fh4H1Tyg2pqYv59N92JudcGPaB70pHN0yNaCg8wM639+itpRcKoSHRK5EV3/K",
	"Ncmlgtw/aHxjv8y5+ARZiX5pTVgM6A8bJfUJV+X9lcR0j56W9EYqVyZhnuFQuc+c0s+gBBdL3X/mg6R+",
	"9Xs325LdQPfiPArqEAJ/FHg6QlyUV80E2d+huiFU2RHl4arpGs887wbOZxzOm77X9lGfnv1Gaepum7Zb",
	"BC3Fc9TIvzudFt9tzlWQP5vRY1k0KIWG549vHGRdU+E2SpvrbSKnHYLWDbtUHnCwL3a6KVPZyu9emxmP",
	"UWh7bdeq2UUBcYrB2WhsmqZ55LKUqNCTKFqtViOw2yOpllF9VkfvplevP9y9PjkbjUcp5ZmljJNhczvE",
	"BTcZCIEquLiZBieB7RUBiqSQ3N5x88xlpUhwwQUmNgILFFBwNmGvRuPRqeEBKLW0R1Dw6PE0clNU9MST",
	"Kto+s4uSum9VNwQETiqQi4BSdFCYNVXHf8ImzPXX1icBa1pBju6V8GVf9/TXHW3crBmszUtk4lr8NjJI",
	"lRjW3x+GzAszdxg1XcrEtuxYCqqHXiiKjMcWfvRVu88FW9V9OdP96lFVLoR1IUU9oJ2Nx102P/5mPHQ2",
	"Pj20de5OfReY7rOERbZr6hKS4Nbx4myevrzNewElpVLxP12Uno9fvbzRN1LNeZKgLWnnpz+A2msp0Bj7",
	"5Uf4cWrmQwFZcIfqEVXQCIaMwNTZL26+ZDOz1OQ+z2GJ0XxN8gFF9GT/VAbCEj3pf41kc/Tjp4vAngwe",
	"OQT3t+862X+NNDUCl+vfjcpjuX+vUQVUS3oyv9k6nPzeZO8m4AEXyJiQTjQpdHOup6jMuQA7pe9b6jji",
	"QmwJ+smy+PzljX6Q9EaWIvkH5ZXz9E5euSFqWFNVWGQQ73dVXWDMFxyTwOnqpNitO9Z+0w5osY32Rue/",
	"ps163u7V7qRogFbflPbPQeALkf+69Ut365+0stRp6kpLipBRerA5u+0gTjF+6BSLt+7s0Km0BaG2OrP4",
	"tQXqSot720SsmlV/BQAA//8wbcNPFBwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
