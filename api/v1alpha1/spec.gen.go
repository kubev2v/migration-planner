// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"qItw7hX3CN9f3/8vAAD//21rC4dBUwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
