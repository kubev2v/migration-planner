// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"NsLZb8JMvJsPN/8LAAD///btz4hsYQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
