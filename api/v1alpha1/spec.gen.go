// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
