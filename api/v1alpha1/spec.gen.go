// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"W9+s/xcAAP//83GSEqhdAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
