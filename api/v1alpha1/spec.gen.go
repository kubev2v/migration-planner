// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
