// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
