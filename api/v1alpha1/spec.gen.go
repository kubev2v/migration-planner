// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//tJ1IRv1QAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
