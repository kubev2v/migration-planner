// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
