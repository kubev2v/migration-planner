// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
