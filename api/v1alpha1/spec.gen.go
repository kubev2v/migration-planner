// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
