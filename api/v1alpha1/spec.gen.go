// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//0pjJRiFWgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
