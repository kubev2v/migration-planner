// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"q3DuyyQTvL5e/ycAAP//W3hMOZVbAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
