// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xcW3Pbtrb+Kxj0zJzLUJKdOklHM3lwnJtP48QTx+lD40khYklETQIsAMrW7vi/7wFA",
	"ijeQomMrcXb1ZgvAwrpjrQ+Q/sahSFLBgWuFp39jFUaQEPvn4QK4Nn+kUqQgNQP7cSiBaKCHdmguZEI0",
	"nmJKNIw0SwAHWK9SwFOstGR8gW8Cs4QC14zE5zI2y1ozGK1RyzJGfYSUJjqzXADPEjz9HXOhR6HgHEIN",
	"ZskVYZrxxWgu5KjcVuEAg5RC4gAviI7AEBwxzszgiPElcC3kCgc4S0dajIw0OMBKZDKE0UJwwBed7Bzz",
	"ufAKlaX0tppaglRMcA+5mwBL+CtjEqiR2+onV0eNkaa2g4rBqiyVe5WSidmfEGrDh7X9qRTXq7YDRFqn",
	"uR0Txt8CX+gIT/cDzLM4JrMY8FTLDJrSBfh6JEjKRqGgsAA+gmstyUiThaW6JDGzap9ikTDNWRxkMg6U",
	"JlIrLvQV09Ezs7WyurB/fWMuGixwsVbQdjlIyPWz/b29PXxjtm3bSilQKrmvYB0Yipwk4PV6xUmqIuHS",
	"CdOQ2D/+S8IcT/FPkzLdTPJcMznLV+BSOiIlWVlqNgSPB6YHO/mj/bhMEdXwlksthE0Hbq4nrH2BZoWt",
	"0a+HVSnzRa+BXgmZtI1UMrhBUcfriZ0GGO5dhZABWbP3xdAMEsaf7RdOZ/VxByNQUKFkqbZJDZ/ZMSTm",
	"SEeAyo0RJZpMP3P0f+iPtTb+QCN0QnhGYrT+DGVpLAhFS0bQ/5+9f+eWEJOtzPQjEcf2JECzFUrYQhKz",
	"MUpjwjlIZOd95ji4u9IEBzF/VvJlSbsArXpP23H6HeQtU3pw3FQC3xM55egH5/R+55uz2GOoVyyGQtdz",
	"IZumwkHpBzPGiY2tu+rUJdXcq+vsvCOJx2vuw46bnN9vT6u0fkuep26rpijuc6PUpC3RGAcN8zxAfbSE",
	"fkE0UVpIaHsXZerS5Y1WnphLgCOSkpDp1evnlSmMa1iANHMiIukVkXAYhhCDNPn2RCyraW8mRAyE28lC",
	"abdXXVnHthqaM5CFysxMdBWBBKQjpqxLWwEQU4hoTcLIFpP9B/lNgBNBwV/QplJoEYq4yIOtCVpoEm+S",
	"X3etXgKnQm4uE7U7q5qbtbS/phgUJutWfkO4Qgu+cHhpa+6WVySgFFl4/NrOR8XwpqO5mHdxE+A3TGmx",
	"kMST4WzCqubULj2XuTNh/BOJM/DPVhpS30iTvYJIviJwnPj09EYoX/GWZkdC5kLU4z9LZs6dj07PUWgn",
	"dbprhfMwzc5EeAl6I02VTxtClXmC7pyzvzJArIw9c4zYaDPR5yscEkiEXJ08bxMz6kFuGDGOTp5Xzx/G",
	"9ZODQXx2R+vQcFoHSbfLF91gXYKTVi3CuJPAjDeT/oLpI5EkTLcJvWYahXYMRURFpq+9JklqxMbhY7L/",
	"5Mn+wZPH5NHj2f7TEABmT5/SfQgP9ijMHj+lv1BycNDTeL7zHjef3CCyJwKaEQUUCY4WTCNNFjUe9sb7",
	"44PRwd5okXOzMYpLYetcdChXEk+gxJnSINUpSHMWhcA1yFuG/PoMGN63lOeeh57x8lNxBfJME+2IEkqZ",
	"0SiJT2vsdzJXCm6oDWfMppMOnoySjpy+bqkhDvpKyMvhbLxzC3y03IGUm61jezOlNGffrDeFdtrjy+Rr",
	"BW6epOVGTfbbim2bv6K+mq/5vbzSDzZbxTwA+ttEM8kIX0ZC3/xPR26aU9fG2SeqnRfzjRyBIGfTJ9tb",
	"MnM5uC7XJazupZeNLXnD3rJxft+dZkNmw3KxjU/Sdco/VirzlMakBtu0MVOR1UZa521rRVyotj/fumkB",
	"rvUNbrfNYgwP/ob4nhxQpId2wbZUV0yHkVfKTtxJN2AfpQmnRFJX0mrJZpmDiNfkA5xxlaWpkGbAB/Au",
	"Y8K97Yu/zOZd59Ya4boXgO4r4KImqFWBxEoOvJw7mKztvcXlQC9Ascixie3BkF+HndkYGO7LLmn5jsQu",
	"ZxT8VELCVO2Ar/Sqt74a6EElu/D9Cg/dlj2yiz1+af6cs5BoOIoI4xtPhTxx0qPmwvtS9+1wc0hSvQoo",
	"W0LgxZcGyeJUZKtR19Jfrwa5vLsXMJ2iik6zWczCX2E1fNezN+UiLwDVbc5b4Yd5bHv82o2UENbON1qy",
	"vE9dKf9AfKTtD+ur0gYEbz+3QBeSoDPJka1hbH8ekjhWSEdEIyr4f+tihtARSOSIqzZI2YnnHKIoSwgf",
	"SSDU9OaoMlyAce7u0v3HFDJ0bd0w9qV7CUS569HmRgkJI8ahc6uraNXYwOiAccvDZ/yKsDiT8Bnn/IzR",
	"cc6Q0w5TyLqNme5wQi6qPTwiS8Is/jBGh+iDZROFMZFszkAhwtGbjx9PC2GNm6JZZrQMhpJGYglSMgqI",
	"6XH/zbfXnLkuS+Wh9xyQmE/RZ3yWhSEo9RkjIauSjtGJhTz5XEyRvdacTiYLpseXv6gxE8b/kowzvZqE",
	"grv6SUg1obCEeKLYYkRkGDENoc4kTFz02UOWCa7GCf1JpRCOCKej9T11+1Br+a1LOj0tkK08jrdXHfSU",
	"SsXWvvxbNFHtlo0Ous330jz5AO7q6LkEcknFFfdcx1eRz15UYD2x6Jt7WupXQroK3kFqw+b9xnT0G5Gc",
	"8YXqX/NO6H7yDQWVQhase/ncyFQXB37tq35Mtr9LbpvuxoHrR0Vn95Xr3WXBVyxeX4hWbXRPzRxn4V3k",
	"4lVruOx5n9yJW+JvFFIJpkyhDTS59A6xfvfTRbaP5Xy1LwGm9wYaSpJ8ta9syg+DksPwzOAD23B7q6CM",
	"v0K8dUxUg8tavK7KDh/zRYU3GXTWsFt//mPKbQe59RWfd0C6yprYOULXMxB/9bl1+ZWKvlzmZa6vNbsP",
	"jK9f8DLWG4dBN0ZX4kqe/r/h7WHusz4sqpIXJCi24EBHmfQgqHCdMgnqC/FcGr00Y65M1SyB/CoO0PmH",
	"t0iLS7C19jBYJt+7Tv9UwsjxZkka8iaPxIJQxheuyncvfyhToSl1V4glZAHjjUCH2a+tjRtb2zmTxCwE",
	"rqB8LIEPUxJGgB6N93DOMC7K26urqzGxw2MhF5N8rZq8PT56+e7s5ejReG8c6cR1mEzbK63y7u40v7s7",
	"PD2uvJ+c4oxTmDNu2sgAixQ4SRme4p/He+N9k4aIjqyNTJE8We5PSujVXfeBx2amk0fViZZyfs7RfMJh",
	"bTwlkiTg7kp+b9KzNbyI0VVENCzBOQCFOcli0+YZx0MqEllM0QwQoRQo0sLOkqCyWFtYH0/xXxnYYjhX",
	"NuNhnFH4kpMybmxPFq/fXxjjqlTwHBh7tLfn4ojrHE4kaRqb5MoEn/yZt3olwWGvoSwIYn2kroL3vxr7",
	"HOzt39ue7n2DZ6tzTjIdCcn+5Zzi8T0K2rnpsWlAOIkR5DMC7HLe71Ww/8LWGMrjcg4LNL1q7W6g7nZu",
	"0mF1golXUPq5oKstWNM+WzOyJFmsWUqknphUNSqeddyWXvU1XONSx5xXNy0X3d+CUD7zOc1S56PfwF2e",
	"E4o+ONPt4sLExU3gy9CTvxm9ccESg+9F3wv7+YawcZNqYdObro9feN/32QxszpNKAqa46cPVHLwBI/lG",
	"KbkvHf9DXP1g7+ftb/pKyBmjFLjb8WD7O74T+pXI+EM85bx11WvQriBNIWRzBrQval+D3oXsLmR3IfvN",
	"CtNMdz6Z7z9g3aSHGq3bLJDza9pBtewuUewSxY+QKM5ALkGil4ML9gIN6jzzkw0vsFsHf/5t2q0FkLsA",
	"6Aqd752XrT5rGnYInurrhGjeCaHQfQ8vv3ovVvp7orP16NZUnb+F2EFCVQsXX4DtKpQtANllOjP4LQxX",
	"PmraGa/DeP1YXm7BDhjvrBjcRoVSe2D4jZG24mnbDmV7UN7aPk4Go2tdjlw9RIbX/GtiP1Z33u3Wu4J7",
	"V3DfacNbVAZtCK0jNl+D3gXmLjB3gbm12q8HLuuISTf60MJyW9Xn98HGurOB42edMHeZYZcZ7h8j21Ru",
	"T+zbK/t2HIjntxveAKE26t9/OnTvtFpZxEw5zkf6Uwj9fid7z0E8JDwGufNm99voLrc1r7PIBusWjwR7",
	"C7i1fe3vaZ1/eNtdwb3I3/O5Sb0mz3/ky1rqx6ri6k8sfTnNPphcP26sBMg/K5MffKfOZKPr17421FMc",
	"Vb/V46uPjivj/7ElUlPUB1olVYy1q5d29dJ3qJeKXw3dkFQKjBLNit+pZHyBCEcfPn0069GcxYAokxDq",
	"2Jd5zJLieSqLf4D2bOOT3CG/NfkxgrqG/ufldQjx/w74kcnmtwU6fpfx/vNa5/efN37D1ROD5W9tmpzn",
	"vq07z+J4l+92+W7r+S4CEuuos1VwwyiMILz0dYGxTTXDuq8KC/muF5Z/ZRl1Gc59XWeCby5u/h0AAP//",
	"KeOMv5teAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
