// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xbX28bNxL/KgR7wN0BK8luc8BBQB8c559RJzFsx31ojIBajrSsueSW5EpWA333A8ml",
	"tNJyV3LOctJGT3FMcmY485u/XH/GqcwLKUAYjYefsU4zyIn78WQCwtgfCiULUIaB+3WqgBigJ25pLFVO",
	"DB5iSgz0DMsBJ9jMC8BDrI1iYoIXiT1CQRhG+AfF7bHGDkbXqJUlozFC2hBTOilAlDke/oaFNL1UCgGp",
	"AXtkRphhYtIbS9VbsdU4waCUVDjBE2IysAR7TDC72GNiCsJINccJLouekT17G5xgLUuVQm8iBeDbVnHO",
	"xFhGL1UW9KGamoLSTIoIuUWCFfxRMgXU3tvpp1LHmiCb2k5qBquLtOK1upkc/Q6psXI4218oeT9vAiAz",
	"pqjsmDNxDmJiMjw8TrAoOScjDnhoVAmbt0vwfU+SgvVSSWECogf3RpGeIRNHdUo4c2ofYpkzIxhPSsUT",
	"bYgyWkgzYyb72bLWThfupyeWYkMEIZcK2q8EObn/+fjo6AgvLNuGrV4QQ7SRCpqmokzfndEoOMcK4JQU",
	"JGVm/vp5bQsTBiag7J6MKDojCk7SFDgoi5y3cgq1zSMpORBhN+eSQty5CyWNTCW/dguRDUYawrcJY9pO",
	"T0FQqba7jFttMmuoYkkxCfpr18TG5YIWYi710sWfholy0JpM3M0o6FSxwrgA4PejsJxsuVzYd7tI8Bum",
	"jZwokkcAQQyx/zIDue7SMyZKkbmzKxM3hJcQ360NFLGVTfECkepE4iWJ6emN1JGs046uXc2/NGq7ic7E",
	"WJFIxuOlNqD0BSjraykIA+qBWqTBSfXawX8oGOMh/mGwysKDKgUPVn4doZdJbS7kDNSVIcYTJZQyix3C",
	"L9bEbxVudXFLbXfBnIVaZLJKOvX6eqCGBJiZVHe7i/HOH4jR8j5ema2Fvd2yMmfXrjdBO1tAXtu8KUJT",
	"OU0T1lSwhpc4UkPJ0kArCyDu0p1HuvWeFZq79t+c+m32xHbL3LzVTferGHkCSSVm7G7nZORdff1edzCP",
	"+/9GcGpxf3s8bI5xfcsmilj3OdO6jKRSojVonVclcbPEleXaSg1DLJ6Aebhmt9x+W1LnH7htv8buzrRx",
	"/YhPBXdr5pSprYzSLHpLQfKWnF+l81DIa0MEJYr6rGsUG5W+ol+ST3ApdFkUUtmFWD0+5UREy514JeBk",
	"iynxKiMKruUdiOZtfU/waceGxQQi3QKtiIYj3WKdM58jdzJt7TYRs1451hG8h+6vi7RvERfJlzSFO2qQ",
	"1SNdd0gLG4Nz7Y5+H3JiSakNvlJcKMiZXkuxtWr4wb1frL9z3NsbuJoMUbg4y566w5Gixv44ZikxcJoR",
	"JvbfxliOVecU1eruFIOikspvLL0kZ+Ln49ArOTZFaM+2Qtg3crac1dlFOeIs/QWeoLHTOvtk89Ji0/rt",
	"kcld+GHu7x281fU/OES9d1hqCQNn+3PVTdjXRjGBdVQPy0HQetPkf4+YRgQpMKUSyKV8NJYKpYRzjUxG",
	"DKJS/NOEHdJkoJAnrvu+p9ulQztBWZkT0VNAqIUFqi0jOUYmA+QnM/5/TCNL16XZfkyBCoj2w59NRjlJ",
	"MyagldUsm28wsDpgwsnwEb8ijJcKPuJKnj46qwTy2mEaQV4YSwOU+6+QiAlvcUuMTAlz0O+jE3TpxEQp",
	"J4qNGWhEBHpzfX0RLmvxj0al1TJYSgbJKSjFKCBm+t1zvag5K12ulIfeC0ByPEQf8VWZpqD1R4ykqt+0",
	"j95KexUxlkPkhjbDwWDCTP/uv7rPpIVlXgpm5oNUCl9uSKUHFKbAB5pNekSlGTOQmlLBwLu1AyeTQvdz",
	"+oMuIO0RQXvLKVwzojdwG+roZtVOd5r5xXzh5u0l+ED4XAG5o3IWKVuy+kygs7lbbgztT0dn9EoqXzj6",
	"qLjbvl+ZyX4lSjAx0d1n3knTTX5DQatLBtGjcm4Vqk2CuPZ1JLkW5Wno9bsbpabpFn7sdBoaii8878do",
	"X3A4D51A3UaP1EMIlv4/9xJ1a/go9JjSyQeOUSgUCmwBRTcKghU65PJ1oI1sl8jV6VggKR5t9qNI/sVY",
	"2RYfdgoOu0eG2LwFN1klK/8L11v6RN25nMXXVdmCsZhX3HaaeyMetE8HVh1tpI/YuHBaiR3rgmvQUKDZ",
	"RADtlSoyR4H7ginQn4iJzJztms/4tktxVZPNvB8uz5HrS2323q29q3iv079Q0POyOZKWvIUSl4QyMfEF",
	"k0MZokyntmqYI5aTCfS3NkyWX1MbC1eWepNwloLQDom+AcEnBUkzQD/2j3AlMA6Vwmw26xO33JdqMqjO",
	"6sH52enLd1cvez/2j/qZyX3TyIwF+Gr2gi44EQIUOrk4qz20DXEpKIyZAOrAUoAgBcND/FP/qH9skUhM",
	"5mxk643B9HjglVEVRhxMpAj1v0cEpZJzSENBGE46NlXco3iIX7jtV8tVBbqQompjfzw68mgVpmr+SVFw",
	"2yMyKQa/V7Wpjwlb2w5fFTkLrEv8/hd7+2dHx4/Gyz+tRFh9EKQ0mVTsT6/y/zziBVuZntkKTxCOoNqR",
	"YN8DhjmPe6SZQMT/bGPXajq7uDJcQRTJwU+uf9uk40paydEsIwam4J2YwpiU3HY9NnggncmSUzQCRCgF",
	"iox0uxTokhs3oMVD/EcJrherHIaJlJcUPlWkbCha6qoRu273ia5VH3xAWAvCiuohbf2snwchUsGsgTK/",
	"fhUWbYgFbZ5LOn9k41WDqY3Zh62jFg3gHD8y75hSvTzUI+cJjPicUHTptXtA6yLZzHkDnREFPVd1OBS0",
	"B0zCOXK7fY2ynHtINSGC/ekuE4+my8n4flPh+tz+ew5YV6BsOnrZRILVUQcQ6OCzM+6iFQqvwaDl+NCm",
	"MV9IjuZ1bDRg8Bo8Cugy4nUm1qs1Ui5F2qJtlSHD0npEi+TJZRm7/zTZhbivEeie7Z/nO2leyVL8RRD+",
	"mdFFV43/ItT4LTm7XtRvQ/DZi+VoOuyPwNgN+NsxvOUp4DvE9FeI3M+Ofto/01dSjRil/u347+m6K4YP",
	"6NRstnFOVEDKxgxom2/aBHNwzINjHhxzX21uGXFP/6i9zJhorGReqw7HjDc91Z/51px1X+332rP/Tk34",
	"U0SKE4He35z4me8hZhxixj7q8I6Zgy3EBx58w884A0KboeUNEOo8fwXUzUhit5xVK91hhH69nN+Rondx",
	"j53gvB1+W+HyUPN6i2yxbngZ6yztlvZFU0bQh8vz9truRfWI5Td1TxB8QnKW+mvVd+vvirGY5l4Jly96",
	"320kf/aVepZt0FdTI6X/Knanomk0R2UR3maJQJc31/a8q54QZQpSw+eRMsoeufS8XvlC6xuvpfKSG1YQ",
	"ZQaWTC/8kdSK+voLuqseG9q7zmBdQ/96eZ8C/3f9xXzEBHHvad1v2Y5B/DH7cYu01g8dt37KFiku7J09",
	"Xmw37D/LG5eczw+F3KGQ+xqFXO0FaYfpau2VwH2Ysm3auvqrir/9YGfrpxwH3z749l4eSzqmrzv7a3ji",
	"+06ctfbXXt/UQ/PBeZ7eebZ8AiRg1upGSKrw9zFwz7SxPYAUrd8LHRzskBEPTv1Enw9kQLjJWgdYfhml",
	"GaR3sdkkd56220ywJkHF9daJr52c3sH9l9MDvLhd/C8AAP//4WXjrk9KAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
