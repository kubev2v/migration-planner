// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
