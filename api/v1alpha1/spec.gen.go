// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
