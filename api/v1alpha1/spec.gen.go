// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
