// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
