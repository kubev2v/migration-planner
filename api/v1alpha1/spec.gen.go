// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"7f8FAAD//4xl7UejZgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
