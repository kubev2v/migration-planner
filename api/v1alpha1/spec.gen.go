// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
