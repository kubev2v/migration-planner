openapi: 3.0.1
info:
  title: Migration Planner API
  version: undefined
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: /
paths:
  /api/v1/sources:
    get:
      tags:
        - source
      description: List sources
      operationId: listSources
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SourceList'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - source
      description: Create a source
      operationId: createSource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SourceCreate'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - source
      description: delete a collection of sources
      operationId: deleteSources
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/sources/{id}:
    get:
      tags:
        - source
      description: Get the specified source
      operationId: getSource
      parameters:
        - name: id
          in: path
          description: ID of the source
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - source
      description: Update source
      operationId: updateSource
      parameters:
        - name: id
          in: path
          description: ID of the source
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SourceUpdate'
        required: true
      responses:
        "200":
          description: Updated source
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - source
      description: Delete a source
      operationId: deleteSource
      parameters:
        - name: id
          in: path
          description: ID of the source
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/sources/{id}/inventory:
    put:
      tags:
        - source
      description: Update inventory
      operationId: updateInventory
      parameters:
        - name: id
          in: path
          description: ID of the source
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateInventory'
      responses:
        "200":
          description: Updated source inventory
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/sources/{id}/image-url:
    get:
      tags:
        - image
      description: Get the OVA image via URL
      operationId: GetSourceDownloadURL
      parameters:
        - name: id
          in: path
          description: Source id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: URL to download OVA image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/presigned-url'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/sources/{id}/image:
    head:
      tags:
        - image
      description: Head the OVA image
      operationId: headImage
      parameters:
        - name: id
          in: path
          description: Id of the source
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: NotFound
        "500":
          description: Internal Server Error
  /api/v1/assessments:
    get:
      tags:
        - assessment
      description: List assessments
      operationId: listAssessments
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssessmentList'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - assessment
      description: Create an assessment from agent or inventory JSON
      operationId: createAssessment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssessmentForm'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assessment'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/assessments/{id}:
    get:
      tags:
        - assessment
      description: Get the specified assessment
      operationId: getAssessment
      parameters:
        - name: id
          in: path
          description: ID of the assessment
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assessment'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - assessment
      description: Update an assessment
      operationId: updateAssessment
      parameters:
        - name: id
          in: path
          description: ID of the assessment
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssessmentUpdate'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assessment'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - assessment
      description: Delete an assessment
      operationId: deleteAssessment
      parameters:
        - name: id
          in: path
          description: ID of the assessment
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assessment'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/info:
    get:
      tags:
        - info
      description: Get migration planner information
      operationId: getInfo
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Info'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/assessments/rvtools:
    post:
      tags:
        - rvtools
      description: Upload RVTools file and create an assessment asynchronously
      operationId: uploadRVTools
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AssessmentRvtoolsForm'
        required: true
      responses:
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncJob'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/rvtools/jobs/{id}:
    get:
      tags:
        - rvtools
      description: Get RVTools job status
      operationId: getRVToolsJob
      parameters:
        - name: id
          in: path
          description: ID of the RVTools job
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncJob'
        "404":
          description: Job not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "500":
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /health:
    get:
      tags:
        - health
      description: health check
      operationId: health
      responses:
        "200":
          description: OK

components:
  schemas:

    # Reusable validation components
    ValidatedSourceName:
      type: string
      x-oapi-codegen-extra-tags:
        validate: "required,source_name,min=1,max=100"

    ValidatedOptionalSourceName:
      type: string
      x-oapi-codegen-extra-tags:
        validate: "omitempty,source_name,min=1,max=100"

    ValidatedSSHPublicKey:
      type: string
      nullable: true
      minLength: 1
      x-oapi-codegen-extra-tags:
        validate: "omitnil,ssh_key"

    ValidatedCertificateChain:
      type: string
      nullable: true
      minLength: 1
      x-oapi-codegen-extra-tags:
        validate: "omitnil,certs"

    presigned-url:
      type: object
      required:
        - url
      properties:
        url:
          type: string
          description: Pre-signed URL for downloading the source discovery image.
        expires_at:
          type: string
          format: date-time
          description: Expiration time for the URL token.

    Source:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        inventory:
          $ref: '#/components/schemas/Inventory'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        onPremises:
          type: boolean
        agent:
          $ref: '#/components/schemas/Agent'
        labels:
          type: array
          items:
            $ref: '#/components/schemas/Label'
        infra:
          type: object
          properties:
            proxy:
              $ref: '#/components/schemas/AgentProxy'
            sshPublicKey:
              $ref: '#/components/schemas/ValidatedSSHPublicKey'
            vmNetwork:
              $ref: '#/components/schemas/VmNetwork'
      required:
        - id
        - name
        - createdAt
        - updatedAt
        - onPremises

    AgentProxy:
      type: object
      properties:
        httpUrl:
          type: string
          x-oapi-codegen-extra-tags:
            validate: "omitnil,url,startsnotwith=https"
          nullable: true
          minLength: 1
        httpsUrl:
          type: string
          x-oapi-codegen-extra-tags:
            validate: "omitnil,url,startswith=https"
          nullable: true
          minLength: 1
        noProxy:
          type: string
          x-oapi-codegen-extra-tags:
            validate: "omitnil,max=1000"
          nullable: true
          minLength: 1

    SourceCreate:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ValidatedSourceName'
        sshPublicKey:
          $ref: '#/components/schemas/ValidatedSSHPublicKey'
        proxy:
          $ref: '#/components/schemas/AgentProxy'
          x-oapi-codegen-extra-tags:
            validate: "omitnil"
        certificateChain:
          $ref: '#/components/schemas/ValidatedCertificateChain'
        network:
          $ref: '#/components/schemas/VmNetwork'
          x-oapi-codegen-extra-tags:
            validate: "omitempty,dive"
        labels:
          type: array
          items:
            $ref: '#/components/schemas/Label'
            x-oapi-codegen-extra-tags:
              validate: "required,label"
          x-oapi-codegen-extra-tags:
            validate: "omitempty,dive,required"
      required:
        - name

    Ipv4Config:
      type: object
      properties:
        ipAddress:
          type: string
          format: ipv4
          x-oapi-codegen-extra-tags:
            validate: "required,ip4_addr,max=15"
        subnetMask:
          type: string
          x-oapi-codegen-extra-tags:
            validate: "required,subnet_mask,max=2"
        defaultGateway:
          type: string
          format: ipv4
          x-oapi-codegen-extra-tags:
            validate: "required,ip4_addr,max=15"
        dns:
          type: string
          format: ipv4
          x-oapi-codegen-extra-tags:
            validate: "required,ip4_addr,max=15"
      required:
        - ipAddress
        - subnetMask
        - defaultGateway
        - dns

    VmNetwork:
      type: object
      properties:
        ipv4:
          $ref: '#/components/schemas/Ipv4Config'

    SourceList:
      type: array
      items:
        $ref: '#/components/schemas/Source'
    
    Error:
      properties:
        message:
          type: string
          description: Error message
        requestId:
          type: string
          description: Id of the request generating the error
      required:
        - message

    Status:
      type: object
      properties:
        message:
          type: string
          description: A human-readable description of the status of this operation.
        reason:
          type: string
          description: A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.
        status:
          type: string
          description: 'Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
      description: Status is a return value for calls that don't return other objects.

    Inventory:
      type: object
      required:
        - vcenter
        - vms
        - infra
      properties:
        vcenter:
          $ref: '#/components/schemas/VCenter'
        vms:
          $ref: '#/components/schemas/VMs'
        infra:
          $ref: '#/components/schemas/Infra'

    VCenter:
      type: object
      required:
        - id
      properties:
        id:
          type: string
    VMs:
      type: object
      required:
        - total
        - totalMigratable
        - cpuCores
        - ramGB
        - diskGB
        - diskCount
        - os
        - powerStates
        - notMigratableReasons
        - migrationWarnings
      properties:
        total:
          type: integer
        totalMigratable:
          type: integer
        totalMigratableWithWarnings:
          type: integer
        cpuCores:
          $ref: '#/components/schemas/VMResourceBreakdown'
        diskSizeTier:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/diskSizeTierSummary'
        ramGB:
          $ref: '#/components/schemas/VMResourceBreakdown'
        diskGB:
          $ref: '#/components/schemas/VMResourceBreakdown'
        diskCount:
          $ref: '#/components/schemas/VMResourceBreakdown'
        nicCount:
          $ref: '#/components/schemas/VMResourceBreakdown'
          nullable: false
          x-oapi-codegen-extra-tags:
            json: "nicCount,omitempty"
        powerStates:
          type: object
          additionalProperties:
            type: integer
        os:
          deprecated: true
          type: object
          additionalProperties:
            type: integer
        osInfo:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/osInfo'
        notMigratableReasons:
          type: array
          items:
            $ref: '#/components/schemas/MigrationIssue'
        migrationWarnings:
          type: array
          items:
            $ref: '#/components/schemas/MigrationIssue'

    diskSizeTierSummary:
      type: object
      required:
        - totalSizeTB
        - vmCount
      properties:
        totalSizeTB:
          type: number
          format: double
          description: Total disk size in TB for this tier
        vmCount:
          type: integer
          description: Number of VMs in this tier

    osInfo:
      type: object
      required:
        - count
        - supported
      properties:
        count:
          type: integer
        supported:
          type: boolean

    Infra:
      type: object
      required:
        - totalHosts
        - totalClusters
        - hostsPerCluster
        - hostPowerStates
        - networks
        - datastores
      properties:
        totalHosts:
          type: integer
        totalDatacenters:
          type: integer
        totalClusters:
          type: integer
        clustersPerDatacenter:
          type: array
          items:
            type: integer
        hosts:
          type: array
          items:
            $ref: '#/components/schemas/Host'
        hostsPerCluster:
          type: array
          items:
            type: integer
        vmsPerCluster:
          type: array
          items:
            type: integer
        hostPowerStates:
          type: object
          additionalProperties:
            type: integer
        networks:
          type: array
          items:
            $ref: '#/components/schemas/Network'
        datastores:
          type: array
          items:
            $ref: '#/components/schemas/Datastore'

    Host:
      type: object
      required:
        - vendor
        - model
      properties:
        id:
          type: string
          description: Unique identifier for this host
        vendor:
          type: string
        model:
          type: string
        cpuCores:
          type: integer
          description: Number of CPU cores
          nullable: true
        cpuSockets:
          type: integer
          description: Number of CPU sockets
          nullable: true
        memoryMB:
          type: integer
          format: int64
          description: Host memory in MB
          nullable: true

    Network:
      type: object
      required:
        - type
        - name
      properties:
        type:
          type: string
          enum: [ standard, distributed, dvswitch, unsupported ]
        name:
          type: string
        vlanId:
          type: string
        dvswitch:
          type: string

    Datastore:
      type: object
      required:
        - type
        - totalCapacityGB
        - freeCapacityGB
        - vendor
        - diskId
        - hardwareAcceleratedMove
        - protocolType
        - model
      properties:
        type:
          type: string
        totalCapacityGB:
          type: integer
        freeCapacityGB:
          type: integer
        vendor:
          type: string
        diskId:
          type: string
        hardwareAcceleratedMove:
          type: boolean
        protocolType:
          type: string
        model:
          type: string
        hostId:
          type: string
          description: Identifier of the host where this datastore is attached
          nullable: true

    VMResourceBreakdown:
      type: object
      required:
        - histogram
        - total
        - totalForMigratable
        - totalForMigratableWithWarnings
        - totalForNotMigratable
      properties:
        total:
          type: integer
        totalForMigratable:
          type: integer
        totalForMigratableWithWarnings:
          type: integer
        totalForNotMigratable:
          type: integer
        histogram:
          $ref: '#/components/schemas/Histogram'

    Histogram:
      type: object
      required:
        - minValue
        - step
        - data
      properties:
        minValue:
          type: integer
        step:
          type: integer
        data:
          type: array
          items:
            type: integer

    MigrationIssues:
      type: array
      items:
        $ref: '#/components/schemas/MigrationIssue'

    MigrationIssue:
      type: object
      required:
        - label
        - assessment
        - count
      properties:
        id:
          type: string
        label:
          type: string
        assessment:
          type: string
        count:
          type: integer

    Agent:
      type: object
      properties:
        id:
          type: string
          format: uuid
        status:
          type: string
          enum: [ not-connected, waiting-for-credentials, error, gathering-initial-inventory, up-to-date, source-gone ]
        statusInfo:
          type: string
        credentialUrl:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        version:
          type: string
      required:
        - id
        - status
        - statusInfo
        - credentialUrl
        - createdAt
        - updatedAt
        - version

    SourceUpdate:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ValidatedOptionalSourceName'
        labels:
          type: array
          items:
            $ref: '#/components/schemas/Label'
            x-oapi-codegen-extra-tags:
              validate: "required,label"
          x-oapi-codegen-extra-tags:
            validate: "omitempty,dive,required"
        sshPublicKey:
          $ref: '#/components/schemas/ValidatedSSHPublicKey'
        certificateChain:
          $ref: '#/components/schemas/ValidatedCertificateChain'
        proxy:
          $ref: '#/components/schemas/AgentProxy'
        network:
          $ref: '#/components/schemas/VmNetwork'
          x-oapi-codegen-extra-tags:
            validate: "omitempty,dive"

    UpdateInventory:
      type: object
      properties:
        agentId:
          type: string
          format: uuid
        inventory:
          $ref: '#/components/schemas/Inventory'
      required:
        - inventory
        - agentId

    Label:
      type: object
      properties:
        key:
          type: string
          x-oapi-codegen-extra-tags:
            validate: "required,label"
        value:
          type: string
          x-oapi-codegen-extra-tags:
            validate: "required,label"
      required:
        - key
        - value

    Snapshot:
      type: object
      properties:
        inventory:
          $ref: '#/components/schemas/Inventory'
        createdAt:
          type: string
          format: date-time
      required:
        - inventory
        - createdAt

    Assessment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        ownerFirstName:
          type: string
          description: Owner's first name
        ownerLastName:
          type: string
          description: Owner's last name
        sourceType:
          type: string
          enum: [inventory, rvtools, source]
        sourceId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        snapshots:
          type: array
          items:
            $ref: '#/components/schemas/Snapshot'
      required:
        - id
        - name
        - sourceType
        - createdAt
        - snapshots

    AssessmentForm:
      type: object
      properties:
        name:
          type: string
          x-oapi-codegen-extra-tags:
            validate: "required,assessment_name,min=1,max=100"
        sourceType:
          type: string
          x-oapi-codegen-extra-tags:
            validate: "required,oneof=inventory agent"
          description: >
            Source of the assessment data:
             * `inventory` - Manual inventory upload via JSON
             * `agent` - Collected by migration planner agent
        sourceId:
          type: string
          format: uuid
        inventory:
          $ref: '#/components/schemas/Inventory'
      required:
        - name
        - sourceType

    AssessmentRvtoolsForm:
      type: object
      properties:
        name:
          type: string
          description: Name of the assessment
          x-oapi-codegen-extra-tags:
            validate: "required,assessment_name,min=1,max=100"
        file:
          type: string
          format: binary
          description: File upload for assessment data
          x-oapi-codegen-extra-tags:
            validate: "required"
      required:
        - name
        - file

    AsyncJob:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the async job
        status:
          type: string
          enum: [pending, running, completed, failed]
          description: Current status of the job
        error:
          type: string
          description: Error message if job failed
        assessment_id:
          type: string
          format: uuid
          description: ID of the created assessment (available when completed)
        created_at:
          type: string
          format: date-time
          description: When the job was created
      required:
        - id
        - status
        - created_at

    AssessmentUpdate:
      type: object
      description: Update form of the assessment.
      properties:
        name:
          type: string
          description: Name of the assessment
          x-oapi-codegen-extra-tags:
            validate: "required,assessment_name,min=1,max=100"

    AssessmentList:
      type: array
      items:
        $ref: '#/components/schemas/Assessment'

    Info:
      type: object
      description: Migration planner information
      properties:
        gitCommit:
          type: string
          description: Git commit hash
          example: "c5a1661465a25b17ceeeb77d1ec40deb57d8da44"
        versionName:
          type: string
          description: Version name, based on git tag
          example: "0.1.4-40-gc5a1661"
      required:
        - gitCommit
        - versionName
